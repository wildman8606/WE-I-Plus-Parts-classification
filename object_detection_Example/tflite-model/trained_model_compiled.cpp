/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.07.2022 15:54:29

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 637648;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
static uint8_t tensor_arena[kTensorArenaSize] __attribute__((section(".tensor_arena")));
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,160,160,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -91, -116, -35, 
  /* [0][1][][] */ 65, -41, 13, 
  /* [0][2][][] */ 30, 127, 16, 
  /* [1][0][][] */ 99, -95, -13, 
  /* [1][1][][] */ -127, 98, 20, 
  /* [1][2][][] */ 13, -2, -12, 
  /* [2][0][][] */ -26, -5, -51, 
  /* [2][1][][] */ 34, 95, 127, 
  /* [2][2][][] */ -15, -98, -83, 
  /* [3][0][][] */ 118, 123, 54, 
  /* [3][1][][] */ 0, -23, -17, 
  /* [3][2][][] */ -102, -127, -46, 
  /* [4][0][][] */ 41, -30, 18, 
  /* [4][1][][] */ 28, -127, 32, 
  /* [4][2][][] */ 5, -122, -33, 
  /* [5][0][][] */ -41, 51, 1, 
  /* [5][1][][] */ -127, 60, 20, 
  /* [5][2][][] */ -85, 40, 15, 
  /* [6][0][][] */ -26, 76, 127, 
  /* [6][1][][] */ -59, 52, -21, 
  /* [6][2][][] */ -42, -59, -96, 
  /* [7][0][][] */ 21, 7, -29, 
  /* [7][1][][] */ 127, 58, -18, 
  /* [7][2][][] */ 30, 7, -18, 
  /* [8][0][][] */ -24, -34, 50, 
  /* [8][1][][] */ -58, -92, 127, 
  /* [8][2][][] */ -29, -65, 97, 
  /* [9][0][][] */ -27, 55, -18, 
  /* [9][1][][] */ -34, 127, -21, 
  /* [9][2][][] */ -28, 80, -8, 
  /* [10][0][][] */ 22, 84, 10, 
  /* [10][1][][] */ -38, -127, -31, 
  /* [10][2][][] */ 10, 37, 15, 
  /* [11][0][][] */ 9, -17, 11, 
  /* [11][1][][] */ 65, -90, 36, 
  /* [11][2][][] */ -81, 127, -43, 
  /* [12][0][][] */ -38, 55, -7, 
  /* [12][1][][] */ -127, 123, 10, 
  /* [12][2][][] */ -76, 88, 10, 
  /* [13][0][][] */ 81, 23, -20, 
  /* [13][1][][] */ 127, 106, -39, 
  /* [13][2][][] */ 66, 90, 10, 
  /* [14][0][][] */ -33, -30, 44, 
  /* [14][1][][] */ 40, 93, -127, 
  /* [14][2][][] */ -19, -71, 76, 
  /* [15][0][][] */ -99, -48, 10, 
  /* [15][1][][] */ -127, -125, 13, 
  /* [15][2][][] */ 6, -41, 12, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.13761414587497711, 0.37815701961517334, 0.11546222865581512, 0.093136817216873169, 0.014626213349401951, 0.043954659253358841, 0.058437995612621307, 0.022718733176589012, 0.077038586139678955, 0.027405468747019768, 0.31196027994155884, 0.30911204218864441, 0.17974427342414856, 0.0080880308523774147, 0.21788553893566132, 0.02275332435965538, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 4506, 2430, 2751, 2185, 37408, 12884, 8530, -11893, 6284, -6123, 2616, -2198, -2484, -16564, 3359, 44212, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00053966336417943239, 0.001482968800701201, 0.00045279308687895536, 0.00036524244933389127, 5.7357701734872535e-05, 0.00017237121937796474, 0.00022916862508282065, 8.909307507565245e-05, 0.00030211210832931101, 0.00010747243504738435, 0.0012233736924827099, 0.0012122041080147028, 0.00070487952325493097, 3.1717769161332399e-05, 0.00085445313015952706, 8.9228728029411286e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 15,-11,14,6,-19,11,9,21,-21,-16,6,12,-9,-9,17,1, 26,1,9,6,14,-2,31,-23,-12,5,1,90,-37,19,14,4, 12,1,2,7,3,-15,6,14,-1,-3,2,-10,-13,-8,4,2, 
  /* [0][1][][] */ 13,-15,5,-4,127,-24,-127,-17,127,127,8,-12,111,-26,-2,-22, -127,127,127,-7,-85,-91,-4,-100,13,-109,127,127,127,127,127,127, 24,-15,-20,-4,-9,127,18,-8,6,-15,-16,-13,6,-7,-18,-12, 
  /* [0][2][][] */ 13,-9,-5,-13,-23,16,58,10,1,-9,-8,11,7,-2,-8,-11, 24,-15,-9,-127,0,-16,-11,127,0,1,-7,-1,0,-63,-9,-32, 4,5,0,17,-2,-4,4,0,4,1,-9,2,19,-10,-3,-9, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.015244759619235992, 0.014232940971851349, 0.0068392255343496799, 0.010295430198311806, 0.061711832880973816, 0.058074839413166046, 0.0099189188331365585, 0.063885509967803955, 0.02070234902203083, 0.092846781015396118, 0.013829360716044903, 0.0069040567614138126, 0.0026511810719966888, 0.036529786884784698, 0.0075096730142831802, 0.019016357138752937, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 6130, -1189, 369, 1942, -549, 106, 6822, 23, -1435, 1092, -1822, 2922, 11637, -664, -1295, -1409, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00035870022838935256, 0.00033489274210296571, 0.00016092295118141919, 0.00024224542721640319, 0.0014520431868731976, 0.0013664668658748269, 0.00023338632308878005, 0.001503188512288034, 0.00048711409908719361, 0.0021846301387995481, 0.00032539671519771218, 0.00016244839935097843, 6.2380735471379012e-05, 0.000859524414408952, 0.00017669818771537393, 0.00044744371552951634, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 4,-19,-5,-56,-22,-27,13,-34,30,12,-36,8,103,127,-20,-93, 
  /* [1][0][][] */ 127,-40,-36,15,-44,59,-66,-49,-38,83,-31,-45,-18,5,-49,-21, 
  /* [2][0][][] */ -43,-94,55,62,54,-81,-105,-13,42,-124,26,-127,58,-12,-73,30, 
  /* [3][0][][] */ 41,4,5,18,-21,86,-45,-26,127,48,7,17,10,-23,3,17, 
  /* [4][0][][] */ -91,-49,4,-127,12,47,68,-124,47,-45,-59,-39,-105,35,-34,-18, 
  /* [5][0][][] */ 104,47,69,-28,49,-43,-127,-110,-19,-72,63,54,-46,48,51,-43, 
  /* [6][0][][] */ 109,49,-124,-73,21,-71,2,-78,-49,27,-127,104,76,-77,11,62, 
  /* [7][0][][] */ -127,1,92,-28,-64,7,-4,-66,-48,69,98,-27,69,-38,36,35, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0092204567044973373, 0.015333921648561954, 0.010193535126745701, 0.0085760848596692085, 0.0078364452347159386, 0.0083779161795973778, 0.0078210048377513885, 0.0091908760368824005, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7775, -2753, 13720, -10869, 20332, 5412, -7981, 9564, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00021695192845072597, 0.00036079817800782621, 0.00023984788276720792, 0.00020179022976662964, 0.00018438695406075567, 0.00019712744688149542, 0.00018402365094516426, 0.00021625591034535319, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -23,57,-8,-9,-83,-81,-127,19, 
  /* [1][0][][] */ 103,-73,-32,-71,77,-89,127,-8, 
  /* [2][0][][] */ -81,127,-24,-117,24,-43,-25,30, 
  /* [3][0][][] */ 15,11,57,5,80,127,80,-16, 
  /* [4][0][][] */ -79,-127,47,-9,-72,-62,4,-18, 
  /* [5][0][][] */ 127,-42,50,88,-42,20,-10,-19, 
  /* [6][0][][] */ 31,35,127,-24,40,-24,-31,16, 
  /* [7][0][][] */ -3,12,-127,-35,-28,79,64,-48, 
  /* [8][0][][] */ -2,112,21,-30,66,127,62,22, 
  /* [9][0][][] */ -38,98,-27,102,68,-127,0,102, 
  /* [10][0][][] */ -7,-114,9,-70,-112,-127,-58,-106, 
  /* [11][0][][] */ -127,-75,87,54,-8,-64,70,61, 
  /* [12][0][][] */ -35,57,-127,75,49,-48,-70,106, 
  /* [13][0][][] */ 95,-127,122,74,15,25,41,-72, 
  /* [14][0][][] */ -6,50,34,-121,-58,-63,-4,-127, 
  /* [15][0][][] */ 56,101,19,-27,36,-35,77,-127, 
  /* [16][0][][] */ -76,-75,-26,127,-7,19,-38,68, 
  /* [17][0][][] */ 7,-105,-127,126,-86,73,-43,53, 
  /* [18][0][][] */ -42,-126,-23,91,3,92,14,127, 
  /* [19][0][][] */ 39,-109,78,-127,-6,-65,23,-24, 
  /* [20][0][][] */ 15,86,40,13,62,127,66,-12, 
  /* [21][0][][] */ 21,115,49,-31,43,-75,81,-127, 
  /* [22][0][][] */ 27,14,86,0,-23,127,53,-48, 
  /* [23][0][][] */ -109,-71,44,-75,82,119,-58,-127, 
  /* [24][0][][] */ -36,-81,35,-76,70,61,-29,-127, 
  /* [25][0][][] */ 127,18,-58,-13,18,32,-47,-3, 
  /* [26][0][][] */ -120,-25,-127,-26,-44,-36,5,-2, 
  /* [27][0][][] */ 83,47,-5,-42,-127,-39,90,104, 
  /* [28][0][][] */ -127,-110,-16,22,-82,-95,7,7, 
  /* [29][0][][] */ 127,80,33,-111,5,-21,-28,-65, 
  /* [30][0][][] */ -84,-87,34,-79,81,115,-33,-127, 
  /* [31][0][][] */ 52,49,-3,127,7,-55,2,-4, 
  /* [32][0][][] */ -52,127,-22,44,35,88,-12,58, 
  /* [33][0][][] */ -30,127,-82,20,1,-15,3,4, 
  /* [34][0][][] */ -127,-91,-55,93,-49,-15,6,110, 
  /* [35][0][][] */ -40,127,-35,-24,57,83,58,40, 
  /* [36][0][][] */ 86,48,-14,-54,-127,-18,125,117, 
  /* [37][0][][] */ -73,127,17,19,-120,108,-30,-89, 
  /* [38][0][][] */ 15,41,-4,17,127,127,111,88, 
  /* [39][0][][] */ -6,-86,40,-11,-21,37,-86,127, 
  /* [40][0][][] */ -105,-61,-127,108,-67,-41,-25,62, 
  /* [41][0][][] */ 127,3,32,105,-81,-29,10,-21, 
  /* [42][0][][] */ -50,2,-61,-127,59,-108,1,84, 
  /* [43][0][][] */ 25,5,94,2,31,127,87,5, 
  /* [44][0][][] */ -24,-14,-73,127,65,3,-32,-41, 
  /* [45][0][][] */ 69,60,53,-127,30,-65,17,-106, 
  /* [46][0][][] */ -43,-127,-32,23,-21,31,-85,124, 
  /* [47][0][][] */ 21,37,127,8,82,119,109,-45, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0056280773133039474, 0.0033583869226276875, 0.0055865040048956871, 0.0046444893814623356, 0.00080360483843833208, 0.0058712721802294254, 0.0066134328953921795, 0.0034880170132964849, 0.003392163896933198, 0.0039177997969090939, 0.0021991876419633627, 0.002089665038511157, 0.0018305020639672875, 0.003950169775635004, 0.002597868675366044, 0.0033284099772572517, 0.0019088344415649772, 0.00030098354909569025, 0.0020701291505247355, 0.0026583406142890453, 0.0038820926565676928, 0.0016328430501744151, 0.0053790761157870293, 0.0024482791777700186, 0.0047595975920557976, 0.0086440397426486015, 0.003894502529874444, 0.005965476855635643, 0.0023190199863165617, 0.00046701118117198348, 0.001977431820705533, 0.0072803236544132233, 0.0031137950718402863, 0.0038502260576933622, 0.0020684844348579645, 0.0035711389500647783, 0.002653671195730567, 0.0057017295621335506, 0.0032232075463980436, 0.0045531648211181164, 0.0032117730006575584, 0.0046264748089015484, 0.0051398305222392082, 0.0056756651028990746, 0.0028459217865020037, 0.0022147439885884523, 0.0026144906878471375, 0.0042564775794744492, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 435, -300, -80, 434, 6903, 635, -101, 1280, 531, 704, 451, 2775, 564, 62, -580, 184, 2768, 22290, 2158, -714, 673, -1038, 139, 1870, -70, -393, 737, -113, 1909, 12403, 2526, -53, 176, -99, 2132, 95, 363, -354, 706, 645, 915, 808, -52, -41, 684, 1361, 738, -50, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00099443783983588219, 0.0005934010841883719, 0.00098709214944392443, 0.00082064548041671515, 0.00014199077850207686, 0.0010374084813520312, 0.0011685426579788327, 0.00061630574055016041, 0.00059936923207715154, 0.00069224502658471465, 0.00038857950130477548, 0.00036922769504599273, 0.0003234356117900461, 0.00069796456955373287, 0.0004590233729686588, 0.0005881043616682291, 0.0003372763458173722, 5.3181473049335182e-05, 0.00036577586433850229, 0.00046970829134806991, 0.00068593584001064301, 0.000288510782411322, 0.00095044128829613328, 0.00043259205995127559, 0.00084098422667011619, 0.0015273351455107331, 0.00068812858080491424, 0.00105405377689749, 0.00040975294541567564, 8.2517275586724281e-05, 0.00034939695615321398, 0.0012863770825788379, 0.00055018358398228884, 0.00068030523834750056, 0.0003654852625913918, 0.0006309926975518465, 0.00046888325596228242, 0.0010074516758322716, 0.00056951591977849603, 0.00080450915265828371, 0.00056749553186818957, 0.00081746245268732309, 0.00090816844021901488, 0.001002846285700798, 0.00050285243196412921, 0.00039132818346843123, 0.00046196035691536963, 0.00075208675116300583, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ 18,-127,-2,-3,111,-51,72,-62,-56,-54,-32,-22,113,27,32,-127,56,-31,-6,24,-60,69,-65,-16,-23,119,96,-23,44,-47,-9,-6,-50,-90,20,72,16,110,103,-63,-127,8,13,74,72,-106,110,44, -41,-60,-17,62,-118,90,47,-52,-58,127,45,-36,127,88,67,-44,-74,-48,14,-20,-127,-16,-115,60,-73,127,17,-8,53,-34,-31,-127,-37,-68,52,122,106,127,117,-88,-114,-90,64,71,121,125,110,82, 19,-6,-48,94,-59,-42,-1,8,43,52,46,-112,16,98,-59,0,-85,-69,23,-28,-46,-11,-127,-11,-113,93,65,-107,17,58,93,-89,-16,-12,-27,19,72,89,40,-1,-17,67,35,9,43,55,18,-87, 
  /* [0][1][][] */ -62,-59,-7,-68,-93,-84,53,-73,-127,-110,126,-71,120,44,-127,-78,127,-127,-75,-63,-47,127,7,-3,-16,56,127,-94,-118,-51,7,-80,-59,-127,-127,41,4,59,-37,-120,45,0,82,97,96,127,127,-127, -127,-111,-127,-79,-64,127,127,-127,97,94,127,-127,94,127,45,-93,66,-25,-127,-120,-100,21,-58,127,-127,119,125,-122,-127,127,0,-116,-127,-112,38,127,127,108,-45,-127,80,-108,127,127,127,20,125,119, -100,-7,-109,127,74,-53,4,-26,39,65,39,-114,12,64,45,-14,-29,-57,-33,-58,-26,-7,-48,-3,-122,48,15,-127,-52,42,127,-116,-48,-2,47,80,103,15,-73,-24,48,127,58,8,0,-25,1,-6, 
  /* [0][2][][] */ -43,-99,11,54,-23,-34,-28,-29,-1,-80,54,-43,-32,-2,-70,0,-88,-28,98,-30,-46,36,-126,-25,-9,49,101,-11,54,63,-19,-17,14,-66,-50,34,16,-30,-100,-35,26,-4,31,44,51,71,40,-25, -84,-36,4,-80,127,51,41,-97,103,23,-10,-62,-6,0,-123,-60,31,26,41,-127,-54,12,-70,19,-80,65,81,9,58,13,-74,-91,-37,-22,-67,87,30,-8,-127,-101,28,-42,50,35,75,-93,46,26, -7,-66,-10,-12,-3,-9,-25,-56,-63,8,12,-47,-17,15,30,-13,11,1,-13,-36,-67,-50,-41,-45,-64,5,9,-56,22,-45,33,-18,-14,-4,17,41,53,-4,-111,-49,21,72,32,3,27,14,33,26, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0042064054869115353, 0.0035139108076691628, 0.0078664710745215416, 0.0078114839270710945, 0.021846601739525795, 0.0063938912935554981, 0.0033820138778537512, 0.0024110209196805954, 0.01029394194483757, 0.0045423945412039757, 0.0021143911872059107, 0.0027559695299714804, 0.0031491382978856564, 0.0032776026055216789, 0.013476588763296604, 0.0069615808315575123, 0.010169305838644505, 0.028586680069565773, 0.0073707308620214462, 0.0049888985231518745, 0.0043199458159506321, 0.028364377096295357, 0.0061576315201818943, 0.0090554431080818176, 0.0031897763255983591, 0.0024769662413746119, 0.0020102462731301785, 0.0031601204536855221, 0.010221554897725582, 0.037099231034517288, 0.010201591998338699, 0.0037946875672787428, 0.0040285615250468254, 0.005958321038633585, 0.0095261000096797943, 0.0027987370267510414, 0.0035777399316430092, 0.0027320417575538158, 0.0049648168496787548, 0.0019665064755827188, 0.010314883664250374, 0.01358485035598278, 0.0029967890586704016, 0.0040721474215388298, 0.0027507883496582508, 0.0086672166362404823, 0.0020040094386786222, 0.0090930107980966568, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 5829, 8305, 3985, -1269, 2037, -759, 686, 36539, -194, -5792, 9231, 54206, 3406, 2431, 1809, 8780, -985, 17950, 2327, 7865, 12266, 168, 7684, -4686, 19577, 4074, 2549, 12368, 1200, -5425, -5542, 12597, 1354, 1742, 1728, 4049, -9864, 11056, 5573, 20532, -345, -1026, 8077, 944, 1042, -5842, 2404, 71, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 9.8974247521255165e-05, 8.268025703728199e-05, 0.00018509343499317765, 0.00018379962421022356, 0.00051403767429292202, 0.00015044450992718339, 7.9576799180358648e-05, 5.6729906646069139e-05, 0.00024221040075644851, 0.00010687987378332764, 4.9750382459023967e-05, 6.4846346504054964e-05, 7.4097370088566095e-05, 7.7120064815972e-05, 0.00031709621543996036, 0.00016380190209019929, 0.00023927778238430619, 0.00067262776428833604, 0.00017342896899208426, 0.00011738584726117551, 0.00010164578270632774, 0.00066739710746333003, 0.0001448854454793036, 0.00021306925918906927, 7.5053561886306852e-05, 5.8281559176975861e-05, 4.7299912694143131e-05, 7.4355775723233819e-05, 0.00024050717183854431, 0.00087292311945930123, 0.00024003746511880308, 8.9286768343299627e-05, 9.4789684226270765e-05, 0.00014019578520674258, 0.00022414352861233056, 6.5852640545926988e-05, 8.4182116552256048e-05, 6.4283340179827064e-05, 0.00011681922478601336, 4.6270743041532114e-05, 0.00024270314315799624, 0.00031964355730451643, 7.0512687670998275e-05, 9.5815237727947533e-05, 6.4724430558271706e-05, 0.00020393451268319041, 4.7153163905022666e-05, 0.00021395320072770119, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -44,1,41,11,-18,-6,17,18,-48,-3,-62,-62,-17,-54,-2,-22,44,-49,41,37,-21,25,-62,15,1,-37,54,-13,5,-22,21,0,68,45,31,-127,17,2,-6,-41,12,-13,44,59,42,-6,34,18, 
  /* [1][0][][] */ -6,50,58,-18,-16,42,-34,-28,15,34,-16,-80,25,99,-25,65,-9,13,-19,-43,5,-65,-17,37,-81,-4,8,-87,-23,-15,37,-47,36,68,-27,15,122,-33,-17,31,-38,49,-71,-25,127,-27,-16,-31, 
  /* [2][0][][] */ 0,-18,-42,22,11,45,20,-12,-9,32,-16,28,64,-77,1,-51,28,-95,22,23,-31,32,-31,20,-22,60,-15,-73,16,-3,18,-73,-37,-66,30,-21,106,33,-16,-49,6,19,68,40,127,-1,20,29, 
  /* [3][0][][] */ -12,39,-73,29,4,-40,-52,-84,7,-19,-36,0,21,27,35,69,-10,16,-40,39,4,-87,42,-53,-69,-16,127,-10,-53,18,-59,22,-12,-83,9,-9,-21,-41,-38,87,-45,-32,20,13,42,2,-36,29, 
  /* [4][0][][] */ -24,-64,-8,14,20,-37,-23,-15,23,-39,61,-76,-1,25,-6,9,-25,-24,7,-16,-8,-55,11,-25,15,-2,53,44,26,15,-17,25,-4,2,-3,2,-59,95,31,-19,31,-23,-18,-33,-84,7,127,-2, 
  /* [5][0][][] */ 39,-31,9,17,20,-36,36,-127,42,-30,-10,117,-86,63,16,-69,12,-85,18,2,-42,60,-46,-36,-74,79,-29,-2,-12,48,-33,-22,20,43,55,10,-47,2,-38,-43,23,-41,-48,3,-41,60,93,21, 
  /* [6][0][][] */ 60,-28,36,-5,-43,-15,-37,22,-50,-8,-34,127,-47,-36,-11,62,18,46,23,33,43,-83,-17,28,16,45,-64,4,-3,-46,12,44,13,22,-20,-13,21,3,1,-3,-9,-31,39,62,-5,-29,83,-20, 
  /* [7][0][][] */ -9,9,8,57,26,20,-11,31,11,-1,45,-10,99,84,54,40,32,34,-24,-8,14,-30,-105,-11,18,-14,-34,51,21,-34,-30,-12,37,10,31,-93,-74,26,36,52,-24,23,61,127,-58,-18,-99,66, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0081677567213773727, 0.0073387348093092442, 0.0066226255148649216, 0.0061576357111334801, 0.010332743637263775, 0.0058784796856343746, 0.0069936146028339863, 0.0046563884243369102, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7092, 7927, -3458, 2217, 216, 4595, -11952, -10988, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00019218251691199839, 0.00017267611110582948, 0.00015582649211864918, 0.0001448855473427102, 0.00024312338791787624, 0.00013831717660650611, 0.00016455564764328301, 0.00010956208279822022, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 98,119,-116,-127,-17,95,50,71, 
  /* [1][0][][] */ 27,-71,29,-127,-42,64,-70,-33, 
  /* [2][0][][] */ -32,127,126,67,98,8,43,4, 
  /* [3][0][][] */ 127,6,-127,75,3,-126,-122,-81, 
  /* [4][0][][] */ -18,31,7,-85,-15,77,127,42, 
  /* [5][0][][] */ 62,83,-114,-127,32,49,44,-1, 
  /* [6][0][][] */ -9,127,35,29,114,-10,0,-86, 
  /* [7][0][][] */ 127,11,-25,14,32,33,121,15, 
  /* [8][0][][] */ 32,127,45,107,114,77,88,-112, 
  /* [9][0][][] */ 25,84,-127,-91,29,75,-7,62, 
  /* [10][0][][] */ -42,-35,23,-37,-9,-36,-53,127, 
  /* [11][0][][] */ -1,-68,-127,-11,5,-12,43,-29, 
  /* [12][0][][] */ -22,-88,-127,-31,-54,46,-25,22, 
  /* [13][0][][] */ -17,-3,-103,74,-127,-35,10,-23, 
  /* [14][0][][] */ -63,-72,-127,-14,41,-5,-7,-68, 
  /* [15][0][][] */ 16,-118,-127,7,-110,-13,-24,17, 
  /* [16][0][][] */ 127,-56,-4,59,-93,27,26,120, 
  /* [17][0][][] */ -16,127,110,-7,-46,-8,-29,-41, 
  /* [18][0][][] */ -3,-127,36,69,-14,-66,36,-67, 
  /* [19][0][][] */ 124,-42,-72,14,-119,21,49,127, 
  /* [20][0][][] */ -24,-127,98,100,-12,-120,5,-99, 
  /* [21][0][][] */ -15,-57,-60,-84,127,12,92,30, 
  /* [22][0][][] */ -127,38,-71,32,59,59,-100,-102, 
  /* [23][0][][] */ -93,-21,62,-8,-56,105,127,-28, 
  /* [24][0][][] */ -23,69,14,-109,-24,127,93,50, 
  /* [25][0][][] */ -55,-119,-127,-73,-41,-66,-45,1, 
  /* [26][0][][] */ -9,79,-15,108,-127,84,-48,-7, 
  /* [27][0][][] */ 41,-101,52,92,30,-87,8,-127, 
  /* [28][0][][] */ 15,72,42,73,127,-24,38,-101, 
  /* [29][0][][] */ 127,16,34,-4,49,-115,-78,26, 
  /* [30][0][][] */ 25,-3,43,-127,-7,-14,14,-34, 
  /* [31][0][][] */ 68,-45,-7,67,-35,29,32,127, 
  /* [32][0][][] */ -51,-50,8,-79,-56,111,42,127, 
  /* [33][0][][] */ -51,29,37,-50,41,127,-86,88, 
  /* [34][0][][] */ -5,127,-65,-36,21,46,-75,59, 
  /* [35][0][][] */ 7,-127,36,64,-35,-75,37,-106, 
  /* [36][0][][] */ -4,-33,-83,10,-127,-62,-23,20, 
  /* [37][0][][] */ -53,-127,90,75,-49,-98,-18,-65, 
  /* [38][0][][] */ -47,26,48,-60,-127,-77,-46,108, 
  /* [39][0][][] */ 75,-127,46,21,-24,-96,2,-87, 
  /* [40][0][][] */ 0,79,54,28,-127,-35,-57,43, 
  /* [41][0][][] */ 115,127,-75,-94,43,-12,26,1, 
  /* [42][0][][] */ -13,-34,-21,17,127,27,44,-7, 
  /* [43][0][][] */ 127,31,80,6,-64,-42,78,115, 
  /* [44][0][][] */ 51,21,-71,17,85,-127,-77,1, 
  /* [45][0][][] */ 31,17,19,26,65,-127,-9,-42, 
  /* [46][0][][] */ 75,-48,-10,127,56,40,15,62, 
  /* [47][0][][] */ -127,-60,106,120,-55,43,90,-105, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0019634563941508532, 0.0021111925598233938, 0.0010893908329308033, 0.0032261114101856947, 0.0034316715318709612, 0.0032020520884543657, 0.001331623992882669, 0.00058145512593910098, 0.0019626531284302473, 0.0026467642746865749, 0.0036005438305437565, 0.0036167381331324577, 0.00072601961437612772, 0.0035833509173244238, 0.0030370156746357679, 0.00055034324759617448, 0.0046141440980136395, 0.0035560450050979853, 0.0045445216819643974, 0.0016478743636980653, 0.0021290548611432314, 0.003276048693805933, 0.0036601896863430738, 0.0016423718770965934, 0.0016447271918877959, 0.0021635475568473339, 0.001194330514408648, 0.0028962492942810059, 0.0014353987062349916, 0.0016195341013371944, 0.0062616085633635521, 0.0047956337220966816, 0.0025140135549008846, 0.0038202262949198484, 0.0038672389928251505, 0.0033145039342343807, 0.003032417269423604, 0.0028710993938148022, 0.0035140665713697672, 0.0030673439614474773, 0.0044652638025581837, 0.002923890482634306, 0.0033445919398218393, 0.001564628561027348, 0.0026866195257753134, 0.0021046858746558428, 0.0062816585414111614, 0.0013497928157448769, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 3126, 4290, 8294, 592, 1127, -1240, 6701, 18083, 2585, -1143, 2077, -1594, 13662, -1523, 1640, 20221, -139, 1388, 33, 4844, 2988, 2200, 762, 5287, 5227, 2657, 8880, 1302, 5574, 5797, 345, 707, 917, 952, -321, 347, -1829, -811, 1805, 1635, 1676, 1811, 2577, 5826, 2604, 3937, 1255, 7251, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00019956228788942099, 0.0002145779290003702, 0.00011072378401877359, 0.00032789635588414967, 0.00034878912265412509, 0.00032545099384151399, 0.00013534394383896142, 5.9098085330333561e-05, 0.00019948063709307462, 0.00026901249657385051, 0.00036595299025066197, 0.00036759895738214254, 7.3791365139186382e-05, 0.00036420553806237876, 0.00030867697205394506, 5.5935928685357794e-05, 0.00046897356514818966, 0.00036143022589385509, 0.00046189725981093943, 0.0001674870727583766, 0.00021639342594426125, 0.00033297188929282129, 0.00037201528903096914, 0.00016692781355232, 0.00016716720710974187, 0.00021989920060150325, 0.0001213896757690236, 0.00029436973272822797, 0.0001458914193790406, 0.00016460662300232798, 0.00063641899032518268, 0.00048741986392997205, 0.00025551996077410877, 0.0003882811579387635, 0.00039305942482315004, 0.0003368804173078388, 0.00030820959364064038, 0.00029181354329921305, 0.00035716360434889793, 0.00031175950425677001, 0.00045384163968265057, 0.00029717912548221648, 0.00033993850229308009, 0.0001590261235833168, 0.00027306331321597099, 0.00021391660266090184, 0.00063845684053376317, 0.0001371905964333564, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 3,-59,5,14,-7,-102,-32,52,-43,-11,33,-7,40,-9,-22,-3,93,-29,41,-9,2,4,-112,27,1,-21,-36,-37,-43,65,-59,-127,26,9,-30,-30,2,-50,2,8,18,28,28,-33,-23,54,127,-17, -127,-101,-17,127,-57,70,-92,125,17,19,56,0,34,15,-14,-49,-46,38,12,-13,20,127,1,127,127,-42,-48,85,69,-118,-29,-88,39,-3,-32,-118,22,21,-74,-62,-102,2,-100,-109,24,51,22,127, -9,35,12,20,-14,87,25,94,1,-5,38,7,-25,4,-2,-1,-102,42,-84,-47,-22,-12,127,25,-9,-23,34,-2,16,39,-13,3,-40,-4,-6,70,0,-10,3,66,26,-19,32,-37,-37,53,-30,-49, 
  /* [0][1][][] */ -20,4,-27,7,43,-76,125,-95,4,13,46,25,127,20,-1,-46,-60,-69,68,47,86,-33,31,1,-69,127,-80,-35,127,-90,29,-127,-44,24,-61,61,16,-75,-23,-1,127,127,22,-127,-89,-64,-8,102, 117,-127,127,16,127,87,-55,-33,44,127,127,-127,-85,127,127,127,127,127,100,127,127,119,-20,0,86,-117,-127,127,42,127,127,23,-127,127,127,127,-127,127,-127,-127,46,38,-127,-42,127,-127,-22,123, 37,73,-35,14,-35,127,-113,127,127,-50,18,77,-28,20,20,-76,-6,1,-127,6,16,-76,-83,-15,43,-30,-18,103,-70,-31,5,-29,-50,20,102,-37,37,26,-25,-92,104,-11,38,34,-75,92,70,-100, 
  /* [0][2][][] */ -11,48,8,-22,12,-61,10,-24,-13,-2,3,5,-17,1,10,-18,-105,-11,41,-41,5,-20,103,-17,-102,0,37,-55,8,2,-27,80,-4,2,-26,62,-1,3,5,35,-9,-14,9,-5,-15,-33,-21,74, 56,-6,-26,-25,39,4,127,-69,124,-21,-25,11,-77,-9,-17,-84,-32,103,-11,29,37,24,-63,-28,-40,51,100,-18,-69,34,-68,-11,-14,10,-5,10,50,-6,-10,117,-107,-9,-18,41,51,13,0,-60, 17,5,9,-18,9,2,2,1,-45,-12,-36,12,12,2,-13,4,24,23,-40,-19,-14,-26,-101,-14,-8,-51,35,-17,-22,33,-44,11,7,-7,-4,-45,-8,27,8,41,-5,-29,-12,8,-6,-20,32,-77, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.012254131957888603, 0.0089920554310083389, 0.030521124601364136, 0.01332452055066824, 0.0083096325397491455, 0.0095291603356599808, 0.016827503219246864, 0.013058469630777836, 0.0035438854247331619, 0.018648074939846992, 0.0064398059621453285, 0.047747291624546051, 0.034611653536558151, 0.038257632404565811, 0.022261416539549828, 0.017584064975380898, 0.0056820465251803398, 0.0032059785444289446, 0.011112572625279427, 0.014812570996582508, 0.0073678740300238132, 0.0070587270893156528, 0.0043161944486200809, 0.021942207589745522, 0.01132944505661726, 0.014805208891630173, 0.026481563225388527, 0.0078094922937452793, 0.015027030371129513, 0.022866060957312584, 0.006499879527837038, 0.0054554636590182781, 0.0052648037672042847, 0.0067609404213726521, 0.010937542654573917, 0.011056189425289631, 0.072526797652244568, 0.021060420200228691, 0.0057137073017656803, 0.012535153888165951, 0.0058512338437139988, 0.0088114812970161438, 0.013531232252717018, 0.0083860578015446663, 0.016014575958251953, 0.0067238514311611652, 0.0035374835133552551, 0.010422270745038986, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -2218, 9435, -1219, -1682, -1423, -2392, -250, -7832, -3932, -879, -8528, -371, 259, -306, -2034, 9221, 12758, 2320, 45, -2490, -7275, -3417, 20637, -3221, -1135, 2622, 5580, -5087, -2045, -1811, -3958, 7571, 7729, -1284, 335, -2027, -19, -868, 13249, -380, 5110, -1156, 3190, 8749, 794, 6507, 489, -4677, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0002883325214497745, 0.00021157777518965304, 0.00071814411785453558, 0.00031351813231594861, 0.00019552076992113143, 0.00022421554604079574, 0.00039594125701114535, 0.00030725810211151838, 8.3385537436697632e-05, 0.00043877825373783708, 0.00015152484411373734, 0.0011234657140448689, 0.00081439188215881586, 0.00090017961338162422, 0.00052379805129021406, 0.00041374270222149789, 0.00013369521184358746, 7.5434792961459607e-05, 0.0002614723052829504, 0.00034853108809329569, 0.00017336173914372921, 0.00016608770238235593, 0.00010155751806451008, 0.00051628722576424479, 0.00026657519629225135, 0.00034835786209441721, 0.00062309560598805547, 0.00018375276704318821, 0.00035357719752937555, 0.00053802499314770103, 0.00015293834439944476, 0.00012836385576520115, 0.0001238777331309393, 0.00015908095519989729, 0.00025735393865033984, 0.00026014563627541065, 0.0017065128777176142, 0.00049553927965462208, 0.00013444016803987324, 0.00029494479531422257, 0.00013767609198112041, 0.00020732897974085063, 0.00031838193535804749, 0.00019731900829356164, 0.00037681355024687946, 0.00015820827684365213, 8.3234910562168807e-05, 0.00024522989406250417, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -35,-46,-24,-105,31,-45,98,87,-97,-75,-13,-9,-82,-25,-70,55,-88,23,12,127,59,-20,20,107,115,64,42,-12,-107,-57,-89,-59,-68,120,18,-27,61,-51,83,3,60,16,-1,-115,51,-28,-2,-99, 
  /* [1][0][][] */ 3,59,-17,-46,-57,48,-16,-38,-25,77,-4,5,42,27,-36,15,-11,-94,78,-36,127,17,-70,17,56,-26,-92,66,32,-11,59,19,-40,-8,9,10,3,111,-23,-7,63,41,-4,7,96,16,-15,79, 
  /* [2][0][][] */ -17,-36,108,-39,89,-58,-16,10,-35,-10,-15,31,4,-57,-45,-127,-49,-105,-44,25,-109,11,-24,-32,-38,0,-16,-64,-46,22,-27,-13,8,-2,14,-15,20,-24,-50,29,40,-32,27,-36,-58,-49,-50,-48, 
  /* [3][0][][] */ 53,12,59,22,30,-44,26,47,-52,-11,56,-14,-84,47,-39,54,85,42,-19,43,-91,-76,127,-10,15,-21,-48,-22,-44,49,90,-67,-2,-89,-8,53,19,-78,-26,72,-36,-49,63,-17,-71,-54,75,-20, 
  /* [4][0][][] */ 19,-13,67,-13,-3,-3,0,-19,-43,-15,-28,-8,44,-65,24,-78,46,42,-1,-20,14,20,18,27,6,1,56,-16,22,30,-127,2,1,-18,0,15,55,-9,41,21,-50,-3,-49,32,-23,-85,17,23, 
  /* [5][0][][] */ 10,-47,82,26,21,13,31,13,-70,-14,-75,42,54,15,34,-47,98,66,2,-2,86,-63,127,-105,-16,32,5,63,11,11,-24,-53,-2,-68,-26,6,34,52,77,18,-72,30,44,29,57,-16,70,3, 
  /* [6][0][][] */ -39,50,-97,127,34,35,32,21,-8,-5,49,-71,-78,-5,-30,17,-99,8,-2,81,4,46,-87,-79,0,-11,19,60,-14,-52,-28,3,38,53,-53,-13,-17,-20,82,9,65,66,-103,-41,-37,112,-44,-42, 
  /* [7][0][][] */ 21,78,-58,19,14,51,106,62,30,52,-92,-31,-28,-12,-78,-36,40,26,82,86,54,2,127,22,107,104,-40,79,-38,22,32,-39,34,-64,-21,1,0,67,-36,58,-62,63,10,-46,69,-18,40,-31, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0024897442199289799, 0.0046469513326883316, 0.0045262062922120094, 0.0041555636562407017, 0.0060961623676121235, 0.0057437373325228691, 0.0039343694224953651, 0.0030296745244413614, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -1029, -1740, 22955, -10660, 435, -17544, 1274, -15185, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 5.8582216297509149e-05, 0.00010934003512375057, 0.00010649897012626752, 9.7777970950119197e-05, 0.00014343911607284099, 0.00013514676538761705, 9.2573398433160037e-05, 7.128646393539384e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 73,26,127,-39,84,80,-52,-62, 
  /* [1][0][][] */ 17,-89,-127,16,60,17,48,16, 
  /* [2][0][][] */ -127,13,-55,-42,85,32,-99,-70, 
  /* [3][0][][] */ 24,53,127,-90,-21,-95,-6,-19, 
  /* [4][0][][] */ -127,30,-53,-19,35,1,-37,-55, 
  /* [5][0][][] */ -122,40,-51,-49,0,15,-99,-127, 
  /* [6][0][][] */ -72,-127,-101,49,102,40,-16,59, 
  /* [7][0][][] */ -62,-127,-83,-58,-62,-66,5,71, 
  /* [8][0][][] */ 78,32,10,24,82,-67,-127,13, 
  /* [9][0][][] */ -37,76,-60,79,-58,-40,127,-28, 
  /* [10][0][][] */ -22,127,21,54,115,-27,-9,48, 
  /* [11][0][][] */ -101,-38,-43,2,-92,127,116,-22, 
  /* [12][0][][] */ 68,78,-127,17,-46,-70,-76,-9, 
  /* [13][0][][] */ 48,-25,-48,-16,22,-127,-42,-3, 
  /* [14][0][][] */ -31,-106,100,49,127,-105,-100,59, 
  /* [15][0][][] */ -37,-70,9,127,67,59,-107,40, 
  /* [16][0][][] */ 96,23,-35,34,84,-115,-127,-16, 
  /* [17][0][][] */ 61,127,64,93,31,75,25,-80, 
  /* [18][0][][] */ 48,1,3,30,127,-21,33,-3, 
  /* [19][0][][] */ 6,127,46,23,-107,10,9,-14, 
  /* [20][0][][] */ -37,67,31,-127,28,-1,-14,92, 
  /* [21][0][][] */ -21,84,33,-112,26,67,3,127, 
  /* [22][0][][] */ -70,-72,-84,40,-127,106,80,-35, 
  /* [23][0][][] */ 115,71,-127,9,38,-40,-95,0, 
  /* [24][0][][] */ -59,64,-17,55,-25,71,-127,102, 
  /* [25][0][][] */ -72,-61,-127,16,-62,-51,55,84, 
  /* [26][0][][] */ 29,-4,-36,-26,114,-24,127,-32, 
  /* [27][0][][] */ 127,-46,49,75,0,8,-25,98, 
  /* [28][0][][] */ 75,83,52,42,127,-95,20,1, 
  /* [29][0][][] */ -40,-33,-27,-46,-56,4,127,-54, 
  /* [30][0][][] */ 13,-127,-34,-54,-84,23,-4,-59, 
  /* [31][0][][] */ 2,21,-4,-19,-127,-5,-12,-3, 
  /* [32][0][][] */ 39,-38,-45,65,13,-110,123,-127, 
  /* [33][0][][] */ 92,127,18,36,110,-7,-29,-1, 
  /* [34][0][][] */ -105,-19,127,6,-9,86,90,15, 
  /* [35][0][][] */ -44,91,127,18,-108,-67,-49,36, 
  /* [36][0][][] */ -99,-12,92,-39,-26,127,81,48, 
  /* [37][0][][] */ -33,-79,11,-127,-26,-74,75,29, 
  /* [38][0][][] */ 27,-30,76,-45,63,59,-127,4, 
  /* [39][0][][] */ -30,75,-127,-24,-22,18,13,60, 
  /* [40][0][][] */ 72,-50,41,5,22,-9,11,127, 
  /* [41][0][][] */ -36,127,127,-17,54,54,-38,64, 
  /* [42][0][][] */ 43,-127,-76,-14,-83,-25,18,-92, 
  /* [43][0][][] */ -2,-127,41,-36,117,-8,37,33, 
  /* [44][0][][] */ -36,127,92,16,6,74,-73,-1, 
  /* [45][0][][] */ -25,50,17,61,-83,55,-127,16, 
  /* [46][0][][] */ -53,-50,74,49,-127,-102,-24,8, 
  /* [47][0][][] */ 5,17,53,-110,-127,60,-5,93, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.002962061669677496, 0.0031279351096600294, 0.0016604469856247306, 0.0025232892949134111, 0.0014459112426266074, 0.0018553106347098947, 0.0013705984456464648, 0.0020413822494447231, 0.0034863615874201059, 0.0028727403841912746, 0.0030011283233761787, 0.001755460980348289, 0.0043428041972219944, 0.0049015982076525688, 0.0029645771719515324, 0.0021761097013950348, 0.0032430456485599279, 0.0020122101996093988, 0.0014157083351165056, 0.0032157287932932377, 0.0051837130449712276, 0.0035676658153533936, 0.002805560827255249, 0.0028226368594914675, 0.0037781163118779659, 0.0025748102925717831, 0.0035420053172856569, 0.0032445266842842102, 0.001132276956923306, 0.0037115865852683783, 0.0026467423886060715, 0.0018933647079393268, 0.0032853907905519009, 0.0015109108062461019, 0.0045967237092554569, 0.0016393391415476799, 0.0044664898887276649, 0.0033750634174793959, 0.0025714610237628222, 0.0027358850929886103, 0.0025676009245216846, 0.0011862436076626182, 0.0025694228243082762, 0.0025679494719952345, 0.001772851450368762, 0.0052618673071265221, 0.002208661986514926, 0.0012520868331193924, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 996, -996, 1060, -1461, 4718, -553, 4840, -1581, 585, 540, 1189, 3566, -33, -434, 379, 2499, -1092, 3195, 5001, 472, -162, 964, -206, 1701, 798, 1316, 636, -561, 5742, -202, 1140, -1545, -473, 4230, -444, 3558, 758, 444, -471, 1869, 1822, 6261, -1216, 1725, 4037, 129, 1753, 5080, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00040484164492227137, 0.00042751248111017048, 0.0002269426331622526, 0.00034487215452827513, 0.00019762082956731319, 0.00025357573758810759, 0.00018732740136329085, 0.00027900718851014972, 0.00047650065971538424, 0.00039263357757590711, 0.00041018109186552465, 0.00023992873320821673, 0.00059355550911277533, 0.00066992902429774404, 0.00040518544847145677, 0.00029742115293629467, 0.00044324528425931931, 0.00027502008015289903, 0.00019349282956682146, 0.00043951175757683814, 0.00070848723407834768, 0.00048761296784505248, 0.00038345178472809494, 0.00038578564999625087, 0.00051637639990076423, 0.0003519137972034514, 0.00048410578165203333, 0.00044344770140014589, 0.0001547546562505886, 0.000507283431943506, 0.00036174515844322741, 0.0002587767958175391, 0.00044903284288011491, 0.00020650468650273979, 0.00062826008070260286, 0.00022405770141631365, 0.00061046029441058636, 0.00046128890244290233, 0.00035145605215802789, 0.00037392880767583847, 0.00035092845791950822, 0.0001621305855223909, 0.00035117747029289603, 0.00035097610088996589, 0.00024230558483395725, 0.000719168980140239, 0.00030187025549821556, 0.00017112975183408707, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -102,3,-99,127,-73,101,-35,65,9,-92,64,-60,92,-72,-78,-120,88,70,71,-127,54,-82,127,-126,-77,-31,65,118,-104,-92,-127,66,32,-127,44,-71,-95,-119,64,23,36,-83,35,-95,127,71,-44,-7, -127,19,-102,126,-120,127,-18,-6,-117,-127,108,-82,96,-69,-75,-97,81,127,127,-106,127,-84,114,-91,-45,-50,94,127,23,2,-72,83,50,-125,89,-89,-127,-70,76,-12,-121,64,87,-71,-34,93,-61,-26, -16,115,20,95,1,26,-21,20,-18,-82,88,-67,64,-25,-25,2,84,38,68,-60,34,-32,72,-80,-3,-35,33,81,74,-20,-96,43,11,-80,53,-80,-55,-28,10,-25,-98,-64,22,-23,-61,17,-21,-89, 
  /* [0][1][][] */ -120,52,-50,88,-105,82,-79,100,-52,-76,83,-127,127,-127,-73,-127,111,110,-15,-115,69,-44,98,-82,-127,-53,86,124,-126,-127,-127,118,65,10,97,-91,-111,-127,111,-24,-127,-80,54,-109,125,111,-100,-24, -101,94,-127,101,-127,91,-44,127,-127,-42,127,-73,88,-104,-106,-77,89,115,-9,-106,54,-127,120,-127,-81,-127,127,92,37,-70,-109,127,127,3,127,-90,-117,-102,127,-83,-107,127,127,-68,-44,127,-127,-127, -74,78,-97,38,-74,36,-127,26,41,-26,54,-109,75,-71,-99,3,127,39,14,-40,4,-13,124,-73,-81,-48,44,3,85,-18,-35,68,7,-3,97,-58,-73,-41,70,-17,-69,-79,-15,-23,-73,85,-27,-119, 
  /* [0][2][][] */ -55,127,38,68,-18,2,-127,47,-74,-31,34,-68,55,-65,-61,-6,65,78,-71,11,38,-96,61,-89,-50,-29,74,35,-127,-99,-65,5,11,88,48,-127,-57,-52,68,54,-86,-69,2,-127,103,33,-47,-57, -20,116,-42,112,-30,93,-125,13,-10,-36,32,-120,39,-84,-127,3,82,55,-100,-46,50,-70,88,-40,-50,-57,43,2,-16,-57,-105,25,26,93,49,-114,-48,6,92,-11,-78,63,34,-70,-36,42,-81,-44, 25,80,-48,52,2,95,-65,38,58,25,15,-28,41,-80,-13,14,72,45,-53,-57,40,-46,35,-47,-12,-19,55,-28,49,63,-90,-33,-5,75,58,-52,-24,-1,37,127,-16,-12,-8,-27,-44,59,-64,-30, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0030503841117024422, 0.0040130354464054108, 0.0039850883185863495, 0.0035614627413451672, 0.0057120583951473236, 0.0040858350694179535, 0.0023561976850032806, 0.0084181809797883034, 0.0052787563763558865, 0.0023635171819478273, 0.0015252113807946444, 0.0038596391677856445, 0.0022010270040482283, 0.0046255304478108883, 0.0014029248850420117, 0.0047509912401437759, 0.0019153774483129382, 0.0020397214684635401, 0.0089273545891046524, 0.0015900676371529698, 0.0019127905834466219, 0.0020900990348309278, 0.0032064078841358423, 0.0022738417610526085, 0.004053991287946701, 0.0020933730993419886, 0.0019221687689423561, 0.0022118075285106897, 0.010951489210128784, 0.0064945826306939125, 0.0016420540632680058, 0.012268582358956337, 0.00946839340031147, 0.0070682531222701073, 0.0029351389966905117, 0.0035671994555741549, 0.0031041968613862991, 0.0025966900866478682, 0.0035988651216030121, 0.010659678839147091, 0.0026185871101915836, 0.014657467603683472, 0.0094941817224025726, 0.0046837190166115761, 0.0053361519239842892, 0.0017707097576931119, 0.0018333477200940251, 0.0042694201692938805, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 10340, 856, 15260, 3308, 18579, -1585, 41270, 151, 2260, 34774, 11094, 30708, 2059, 7104, 48427, 18735, 6441, 2517, -2039, 58389, 3597, 14609, 1164, 10345, 11594, 38747, 2174, 233, 2111, 9812, 26598, -171, 1072, 1330, 4451, 24719, 10897, 29238, 9817, -1152, 27804, 2970, -242, 17307, -3772, 4084, 40555, 23738, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.1773742092773318e-05, 9.4424365670420229e-05, 9.3766786449123174e-05, 8.3799124695360661e-05, 0.00013440137263387442, 9.6137300715781748e-05, 5.5439944844692945e-05, 0.00019807484932243824, 0.00012420603889040649, 5.5612170399399474e-05, 3.5887325793737546e-05, 9.0815039584413171e-05, 5.1788872951874509e-05, 0.00010883601498790085, 3.3009997423505411e-05, 0.00011178803106304258, 4.506770710577257e-05, 4.7993446059990674e-05, 0.00021005541202612221, 3.7413356039905921e-05, 4.5006836444372311e-05, 4.9178801418747753e-05, 7.5444891990628093e-05, 5.3502160881180316e-05, 9.5388029876630753e-05, 4.9255839257966727e-05, 4.5227501686895266e-05, 5.2042531024198979e-05, 0.00025768211344256997, 0.0001528137072455138, 3.8636568206129596e-05, 0.00028867254150100052, 0.00022278573305811733, 0.00016631184553261846, 6.9062094553373754e-05, 8.3934108261018991e-05, 7.3039926064666361e-05, 6.1098588048480451e-05, 8.4679180872626603e-05, 0.00025081596686504781, 6.1613813159056008e-05, 0.00034488158416934311, 0.00022339251881930977, 0.00011020515376003459, 0.00012555651483125985, 4.1663759475341067e-05, 4.3137595639564097e-05, 0.00010045694943983108, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 16,42,19,-30,82,68,-46,65,-4,94,6,31,-35,32,-22,30,35,70,34,-51,-59,71,-1,58,63,23,33,61,-39,-60,-8,82,-18,19,-42,52,33,-127,-22,54,10,-43,65,-9,-30,-40,-60,-14, 
  /* [1][0][][] */ -59,24,-85,-33,7,105,-68,14,-26,-40,-38,47,51,-35,-44,-24,-20,-35,-20,10,-57,41,-109,-56,-49,-39,62,55,-18,-41,47,-40,23,-52,-31,72,4,-63,127,-41,-21,39,-31,-15,27,60,50,36, 
  /* [2][0][][] */ -1,8,62,-20,-18,-93,18,29,108,71,-43,48,112,-38,127,95,-55,14,-32,44,78,-97,-29,-82,35,-45,60,-62,35,50,-6,16,64,-13,51,68,-33,31,-7,-28,27,45,60,-27,19,-87,120,-25, 
  /* [3][0][][] */ 32,11,-33,-16,18,122,31,-6,33,-61,30,-18,-41,-6,1,33,-35,-58,41,-127,-1,-10,-21,-19,-45,77,111,57,-5,-73,33,47,50,-24,103,19,-45,-72,10,23,23,27,-2,15,33,26,-19,-29, 
  /* [4][0][][] */ 112,-38,-7,-35,78,61,49,4,59,-19,-117,26,39,-16,18,-4,-107,-127,-32,-103,-23,27,-53,-25,-90,109,-109,121,-60,-44,10,82,47,-68,-2,-36,-8,0,-36,38,-71,11,-9,42,-48,99,-45,-66, 
  /* [5][0][][] */ -3,-14,-49,17,-9,60,32,-24,77,55,36,75,47,-11,31,-11,-35,127,-15,37,15,13,-43,7,37,9,-76,-44,-8,14,12,-14,-30,-3,44,15,-52,6,-72,11,93,-26,40,56,-13,9,-43,25, 
  /* [6][0][][] */ 95,0,7,64,20,-26,109,-64,24,51,127,109,68,58,-34,73,34,-30,-89,79,54,-57,-75,71,-80,99,83,-27,118,52,-20,0,115,-101,-116,11,97,26,-5,-17,29,68,53,14,65,126,28,4, 
  /* [7][0][][] */ -74,2,-16,18,-56,-59,11,21,62,112,-68,-65,-124,15,-10,-7,-86,105,-18,115,-59,32,2,24,-20,-75,-30,-75,7,37,-20,-12,14,-17,8,-26,10,-49,127,9,6,56,16,-14,62,58,-15,4, 
  /* [8][0][][] */ -18,-72,65,-75,64,-58,80,-58,-34,-108,19,21,-26,-7,50,54,-10,13,-21,102,-15,29,-11,17,80,9,-22,-34,-127,-9,-34,-115,26,-27,-7,112,12,52,90,17,31,-11,63,122,-8,-82,-23,109, 
  /* [9][0][][] */ 23,-27,28,-60,29,62,-36,44,12,-13,-47,-26,13,-29,118,-4,-6,-121,39,49,-75,31,53,-27,-43,-70,-36,58,46,71,-62,-15,-68,39,-19,95,-3,-38,-54,-23,-32,21,35,127,50,62,-66,-3, 
  /* [10][0][][] */ -19,20,-18,-10,29,22,-49,-50,32,45,65,-2,-30,-18,45,-35,-56,127,13,34,2,-13,8,11,-20,56,16,103,47,11,-32,-1,75,19,-12,37,1,-36,-38,15,-74,-5,19,-4,20,45,29,39, 
  /* [11][0][][] */ -36,30,-20,31,10,64,-6,22,13,12,-121,-79,64,4,-18,-42,-6,21,-23,-32,-13,14,127,13,46,0,-14,9,-10,4,-19,43,44,3,-41,-19,51,61,92,31,34,-16,82,-1,-42,-29,72,7, 
  /* [12][0][][] */ -61,-16,17,28,-72,-53,2,8,-24,-47,-105,23,61,-97,6,21,52,104,73,-127,-16,31,-58,-72,-18,-24,17,-18,7,10,-8,73,49,72,47,-38,-62,-36,41,-5,-44,31,46,-22,36,-2,-48,-46, 
  /* [13][0][][] */ -49,-127,-41,-79,20,15,80,22,-111,-1,120,-47,79,27,113,5,112,34,-14,-125,86,-53,95,4,-47,-1,-37,15,-14,-122,-99,45,48,-77,-61,59,27,-77,83,-64,-4,60,60,48,46,4,79,-67, 
  /* [14][0][][] */ 63,28,-65,9,-56,34,-115,-25,-9,54,61,43,-25,-70,-3,-53,60,-94,14,32,65,-46,21,-8,-5,112,-58,-20,-69,-36,-68,-20,127,31,79,-12,-68,1,-9,64,11,-38,89,-32,-56,-57,-39,70, 
  /* [15][0][][] */ -64,29,45,15,109,-15,0,39,25,80,-22,52,48,-22,-26,-4,10,28,-8,-48,32,-42,-67,-59,52,-64,-39,79,-34,7,-6,12,-68,-33,127,-5,-102,-3,59,-28,-49,-14,10,10,-27,-20,-22,-7, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0054678041487932205, 0.0048362044617533684, 0.0067364652641117573, 0.0050436793826520443, 0.0033867713063955307, 0.0074043013155460358, 0.0036659021861851215, 0.007101092953234911, 0.0042424676939845085, 0.0037914672866463661, 0.0068060341291129589, 0.0056162714026868343, 0.004456689115613699, 0.0035532352048903704, 0.0045955013483762741, 0.004369812086224556, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -1344, 9146, -27767, 4800, 21157, -16118, -41245, -10377, -16925, 7483, -18352, -11445, 13802, -7813, -4058, -692, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00012865422468166798, 0.00011379304487491027, 0.00015850506315473467, 0.00011867481225635856, 7.968873978825286e-05, 0.00017421886150259525, 8.6256521171890199e-05, 0.00016708453767932951, 9.9822769698221236e-05, 8.9210996520705521e-05, 0.0001601419789949432, 0.00013214757200330496, 0.00010486327664693817, 8.3605533291120082e-05, 0.0001081294467439875, 0.00010281911090714857, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 45,43,-13,13,-127,-26,82,17,50,54,-6,22,-15,-13,37,81, 
  /* [1][0][][] */ -3,-14,-68,-34,127,43,-47,11,-15,40,-70,5,-56,21,-48,-59, 
  /* [2][0][][] */ -34,63,75,-10,55,106,3,23,45,-4,39,-23,41,-127,-5,3, 
  /* [3][0][][] */ 127,-69,30,-14,70,72,-8,-4,52,31,-100,-59,-56,36,-76,76, 
  /* [4][0][][] */ -9,-2,19,57,-57,-83,-97,-17,-6,29,-1,-26,-6,15,-36,127, 
  /* [5][0][][] */ -63,-29,51,-2,127,36,-26,-44,-29,24,-25,9,-38,47,-78,-43, 
  /* [6][0][][] */ -127,13,-45,5,-24,-76,72,33,9,-43,-42,21,7,-20,-27,14, 
  /* [7][0][][] */ -15,78,15,-48,30,43,127,-6,4,-22,20,-6,61,55,-38,27, 
  /* [8][0][][] */ -18,-35,-44,102,-23,61,-76,-40,65,-33,67,20,117,56,-127,-24, 
  /* [9][0][][] */ -28,-127,-35,66,-53,-113,-45,112,46,63,-8,99,-102,18,2,-16, 
  /* [10][0][][] */ -29,-57,-67,43,-39,107,41,-15,-30,-42,-8,-29,69,95,-127,56, 
  /* [11][0][][] */ -18,-89,-38,45,-36,-19,8,-7,-7,37,88,-108,-24,127,-121,117, 
  /* [12][0][][] */ 9,-69,-72,83,-102,-127,36,27,5,56,-37,65,13,-26,-35,28, 
  /* [13][0][][] */ -52,-44,-16,-16,-5,-33,12,19,-5,127,-24,-27,27,14,2,-22, 
  /* [14][0][][] */ -127,13,-38,-21,-30,112,15,-37,52,-55,73,0,14,-11,-56,-42, 
  /* [15][0][][] */ -21,-127,78,-51,-30,-42,-17,61,26,-42,-88,-68,55,-66,-21,-63, 
  /* [16][0][][] */ 1,-4,5,-28,-4,33,26,-51,33,-127,29,-11,16,29,-56,-47, 
  /* [17][0][][] */ -28,-6,11,-44,9,12,-38,68,51,-4,36,62,61,-53,-5,-127, 
  /* [18][0][][] */ 93,-5,-5,-95,-4,-3,96,-85,86,32,1,20,-22,29,-30,-127, 
  /* [19][0][][] */ -65,-12,-36,-11,-95,95,-9,9,29,-81,-6,-127,-27,-31,-31,-27, 
  /* [20][0][][] */ 7,110,104,-119,105,-75,-85,103,-127,-114,27,-123,-35,83,-40,-17, 
  /* [21][0][][] */ 14,-69,-117,-24,7,19,33,116,-90,-59,-53,40,127,-83,32,-18, 
  /* [22][0][][] */ 49,-34,107,4,-25,11,114,20,35,62,3,14,42,18,127,-1, 
  /* [23][0][][] */ -127,-62,-9,70,55,67,49,-21,-5,-14,-12,-126,5,73,42,111, 
  /* [24][0][][] */ 5,-8,53,51,-7,-37,-7,-39,84,115,-127,75,-27,-59,110,-99, 
  /* [25][0][][] */ 127,-52,97,74,33,40,-5,14,-72,35,18,-7,-6,21,75,-25, 
  /* [26][0][][] */ -32,21,0,35,-45,127,-18,27,-51,-23,-85,29,-10,19,31,-122, 
  /* [27][0][][] */ 31,-2,-12,-31,0,-13,-77,41,-111,-7,-51,-21,-77,39,-14,127, 
  /* [28][0][][] */ -87,12,-16,2,-27,-21,-127,22,-42,-30,-8,14,28,-39,-32,-19, 
  /* [29][0][][] */ -21,-127,-13,86,7,16,117,41,94,69,-73,72,44,-42,-75,48, 
  /* [30][0][][] */ 51,-50,-57,-12,-127,4,12,-31,20,2,30,-37,-26,12,-5,42, 
  /* [31][0][][] */ -109,8,-23,65,-55,21,-20,11,-35,-75,27,-71,-16,-30,-54,127, 
  /* [32][0][][] */ -127,-69,-119,11,-106,-1,46,1,94,9,-48,-65,82,60,9,-8, 
  /* [33][0][][] */ 11,47,-96,81,-79,-74,45,-27,-121,38,-66,-39,-51,127,38,54, 
  /* [34][0][][] */ -3,123,-35,74,-22,-51,17,105,28,-122,16,26,-58,-11,16,127, 
  /* [35][0][][] */ 46,2,-56,14,-127,1,34,-29,-1,18,-4,20,29,46,71,19, 
  /* [36][0][][] */ -25,30,-64,51,127,-51,41,85,-83,9,-104,-61,28,-8,40,39, 
  /* [37][0][][] */ -127,91,-10,-90,-17,-110,-40,-38,-41,-4,8,75,73,-83,51,-109, 
  /* [38][0][][] */ 43,64,39,-49,-80,-79,-127,-67,-17,-47,32,72,-69,-116,60,-23, 
  /* [39][0][][] */ 17,3,3,47,-11,69,86,-16,-19,24,44,5,6,115,45,127, 
  /* [40][0][][] */ 65,-6,124,100,-14,-73,-41,32,-78,85,-55,10,-26,-62,127,-42, 
  /* [41][0][][] */ -43,-2,-5,51,-99,127,14,59,-63,17,-83,-9,-8,38,45,-107, 
  /* [42][0][][] */ -23,-77,2,-35,127,20,101,7,-72,-107,-66,-72,35,35,-39,100, 
  /* [43][0][][] */ -18,-32,-22,54,73,11,37,33,-70,-33,-44,-70,127,43,-45,39, 
  /* [44][0][][] */ -57,-55,-95,-64,22,80,65,-14,-49,-125,-8,74,-24,42,49,127, 
  /* [45][0][][] */ 103,-57,-63,91,-122,35,-31,-127,51,-83,-18,22,67,34,83,94, 
  /* [46][0][][] */ 46,-118,-22,25,45,-109,-68,86,-45,-12,73,106,-28,-62,76,-127, 
  /* [47][0][][] */ -48,16,-16,56,-50,37,98,37,-30,21,80,63,30,82,19,127, 
  /* [48][0][][] */ 39,-19,-60,-77,36,-63,-2,36,54,-63,-20,4,-62,-8,-46,-127, 
  /* [49][0][][] */ 106,-7,38,50,-39,-62,26,127,-8,117,-46,34,-22,-17,115,112, 
  /* [50][0][][] */ 16,2,0,14,-127,-5,-12,-47,39,33,15,60,-31,-45,22,-6, 
  /* [51][0][][] */ 18,-2,-3,-101,-14,100,67,-48,-8,-1,16,-60,127,113,-49,16, 
  /* [52][0][][] */ 7,-27,-10,-100,96,-93,26,-94,38,-49,105,-105,46,32,-98,127, 
  /* [53][0][][] */ -43,-41,47,-31,-36,-127,35,-111,-20,72,-65,51,-45,-18,23,-72, 
  /* [54][0][][] */ 61,55,36,31,-127,-56,-52,-57,-44,18,90,73,-28,-1,37,15, 
  /* [55][0][][] */ 5,0,-49,75,-9,59,50,6,-5,127,-5,59,31,26,-33,53, 
  /* [56][0][][] */ -16,-47,-82,127,-75,11,15,65,80,10,86,63,30,51,21,82, 
  /* [57][0][][] */ 61,-34,97,-82,74,42,-12,0,127,-53,42,79,39,-66,58,-67, 
  /* [58][0][][] */ 97,-81,23,-122,115,-54,-53,69,50,127,-45,23,-8,-36,1,-28, 
  /* [59][0][][] */ 8,57,57,-48,1,-73,22,-14,19,32,-127,-71,-123,-52,52,-36, 
  /* [60][0][][] */ 25,-9,23,84,-16,-80,14,-127,-19,124,18,38,13,-41,-16,11, 
  /* [61][0][][] */ 52,98,-15,5,-46,-23,30,-113,-95,-48,14,9,-64,-23,57,127, 
  /* [62][0][][] */ -24,100,-73,55,-75,127,-11,8,-121,-21,-38,56,-6,70,112,-56, 
  /* [63][0][][] */ 12,-20,-56,-79,-30,-20,110,-25,-3,-127,-4,12,-9,71,39,-5, 
  /* [64][0][][] */ -81,-15,44,-38,49,-24,80,45,-105,-36,-103,-89,9,127,6,62, 
  /* [65][0][][] */ -77,-40,9,-68,101,12,-94,-88,-92,-10,-15,-30,-127,17,-18,14, 
  /* [66][0][][] */ -20,85,7,48,-61,127,-12,-1,-69,7,-81,56,-6,84,49,-91, 
  /* [67][0][][] */ -21,-33,-22,-53,20,-52,65,-49,-9,49,-7,118,-27,3,-20,-127, 
  /* [68][0][][] */ 2,-127,-53,110,-26,53,3,114,78,43,77,21,-103,58,-21,3, 
  /* [69][0][][] */ 30,125,-22,-60,32,-108,-11,42,-42,111,84,124,127,-39,61,-20, 
  /* [70][0][][] */ -3,39,47,-60,53,37,-42,-31,-123,-91,-4,-12,-27,77,-127,3, 
  /* [71][0][][] */ -12,-107,38,-67,69,3,4,109,-62,112,-127,-55,-42,84,-60,14, 
  /* [72][0][][] */ 31,95,26,-7,-96,-71,-127,-109,-1,79,-26,56,7,126,-93,36, 
  /* [73][0][][] */ 13,-47,-27,-19,42,-91,46,-61,44,78,64,-47,39,5,-73,127, 
  /* [74][0][][] */ 31,-19,-9,59,-64,6,65,-5,81,52,10,85,127,19,-64,-6, 
  /* [75][0][][] */ 3,33,-65,35,-58,127,-22,29,-48,14,-34,75,4,54,63,-45, 
  /* [76][0][][] */ -63,33,-33,18,-91,-4,-27,44,62,41,-64,-68,41,-58,-127,22, 
  /* [77][0][][] */ 70,75,-70,127,24,28,51,38,36,-19,114,-42,52,33,63,32, 
  /* [78][0][][] */ 18,-69,-10,-56,64,-74,41,-47,6,30,127,-27,38,-6,-44,116, 
  /* [79][0][][] */ -38,77,19,45,-8,-58,-54,-7,-127,9,70,29,113,79,-82,-56, 
  /* [80][0][][] */ -66,10,35,1,33,84,38,-127,-84,43,-37,-34,33,-26,-13,60, 
  /* [81][0][][] */ 102,84,-13,8,41,-50,75,107,-95,127,-35,-35,-41,35,85,111, 
  /* [82][0][][] */ 83,84,-5,-58,18,-83,71,-110,37,57,-96,77,105,-28,127,-74, 
  /* [83][0][][] */ -33,-76,-17,38,-8,16,-50,-58,9,9,127,42,70,-61,-28,-120, 
  /* [84][0][][] */ -101,-119,-10,-33,13,127,88,-36,100,64,90,93,100,65,-127,-7, 
  /* [85][0][][] */ 99,-35,101,-65,75,5,-45,115,47,127,-72,11,-48,48,96,-11, 
  /* [86][0][][] */ -57,45,-5,19,33,127,16,4,104,48,98,-27,-26,53,-16,-47, 
  /* [87][0][][] */ 31,-34,27,-34,22,-127,22,-48,29,-11,58,-19,33,-35,-26,67, 
  /* [88][0][][] */ -73,34,62,-35,72,31,79,8,-48,-85,72,-64,91,95,49,-127, 
  /* [89][0][][] */ -27,20,-26,12,-30,127,-6,50,-47,3,-23,27,3,60,36,-65, 
  /* [90][0][][] */ 67,-112,38,19,127,-10,31,14,6,-80,-114,-4,-6,1,-82,16, 
  /* [91][0][][] */ -62,84,-75,-26,0,-118,-94,79,-100,54,-65,-127,-104,-26,-27,56, 
  /* [92][0][][] */ 93,36,86,-42,-95,-107,-35,81,19,68,-26,-2,-62,-127,6,-29, 
  /* [93][0][][] */ 10,-82,-127,82,-49,-123,14,109,61,86,-10,55,17,98,6,-45, 
  /* [94][0][][] */ 102,3,127,-49,30,-44,-13,10,27,99,-25,22,2,-17,89,-29, 
  /* [95][0][][] */ -51,-80,-8,14,127,28,49,51,-52,12,-44,-42,43,39,-75,30, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0048133502714335918, 0.0017939647659659386, 0.0041942647658288479, 0.002441970631480217, 0.0027568102814257145, 0.00072608789196237922, 0.005523239728063345, 0.0026277275756001472, 0.0012580250622704625, 0.0021868187468498945, 0.001467243186198175, 0.0018135957652702928, 0.0038185999728739262, 0.0042188777588307858, 0.0020592573564499617, 0.0029877396300435066, 0.0020575120579451323, 0.0016154613113030791, 0.0029024172108620405, 0.0010527134872972965, 0.0039291675202548504, 0.0013347651110962033, 0.0051199160516262054, 0.002427305793389678, 0.001628439873456955, 0.0038791410624980927, 0.0024299214128404856, 0.0025439851451665163, 0.0018827002495527267, 0.0036406309809535742, 0.0039619817398488522, 0.0028285852167755365, 0.0033001790288835764, 0.0015068145003169775, 0.0026945329736918211, 0.0030115456320345402, 0.0019636543001979589, 0.0027689989656209946, 0.0020894275512546301, 0.0023437025956809521, 0.0010216542286798358, 0.0032768079545348883, 0.0019664461724460125, 0.0024858012329787016, 0.0031232328619807959, 0.0015412002103403211, 0.0015171465929597616, 0.0016111470758914948, 0.0034146523103117943, 0.0018555923597887158, 0.0038302754983305931, 0.0014777481555938721, 0.0018319626105949283, 0.00280802883207798, 0.0013567735441029072, 0.0038339344318956137, 0.0035172814968973398, 0.0017363236984238029, 0.0015769421588629484, 0.0030503959860652685, 0.0027041458524763584, 0.0016835562419146299, 0.0017941603437066078, 0.0033868972677737474, 0.0010287343757227063, 0.0016829073429107666, 0.0031572820153087378, 0.0028630995657294989, 0.0029175335075706244, 0.0018862060969695449, 0.0032613645307719707, 0.0018085980555042624, 0.0022933997679501772, 0.0017157818656414747, 0.0037854965776205063, 0.0021383031271398067, 0.005633245687931776, 0.0015727173304185271, 0.0023899213410913944, 0.0017168450867757201, 0.0027826649602502584, 0.0021186631638556719, 0.002942247549071908, 0.0020718385931104422, 0.0022265966981649399, 0.0012256141053512692, 0.0020193331874907017, 0.0032951838802546263, 0.0026803137734532356, 0.0032702956814318895, 0.0022624039556831121, 0.00072669889777898788, 0.0015381819102913141, 0.002086111344397068, 0.0020931491162627935, 0.0018314816989004612, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 781, 5751, 345, 1916, 3423, 20804, 288, 849, 10155, -1329, 6835, 4398, 977, 683, 3019, 117, 5008, 7869, -956, 12611, 740, 9279, -594, 1492, -6834, 857, 3523, 2495, 7683, 635, 2173, 2773, 1712, 8129, 2409, 2247, 4150, 2063, 2699, 2974, 12106, 816, 3332, 830, 1665, 6462, 6141, 7337, 1262, -2408, 1178, 7311, 3418, -2970, 9515, 159, 1230, 6742, 1829, 795, 3027, 6894, 4719, 4, 12517, 7268, 790, 3455, 3451, 4562, 2555, 776, -4034, 6023, 1885, 4589, 111, 7074, 3218, 7330, 1934, 1709, 2568, 5548, 121, 8619, 4558, 1741, -676, 2015, 1604, 20169, 5462, 3766, 4076, 4783, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00034164253156632185, 0.00012733222683891654, 0.00029770098626613617, 0.00017332646530121565, 0.00019567318668123335, 5.1536346290959045e-05, 0.00039202912012115121, 0.00018651114078238606, 8.9292247139383107e-05, 0.00015521627210546285, 0.00010414214921183884, 0.00012872560182586312, 0.00027103701722808182, 0.00029944797279313207, 0.00014616220141761005, 0.00021206411474850029, 0.00014603832096327096, 0.00011466239811852574, 0.00020600810239557177, 7.4719617259688675e-05, 0.00027888489421457052, 9.4739109044894576e-05, 0.00036340198130346835, 0.0001722855813568458, 0.00011558358528418466, 0.00027533411048352718, 0.0001724712346913293, 0.00018056726548820734, 0.00013363051402848214, 0.00025840511079877615, 0.00028121398645453155, 0.00020076763757970184, 0.00023424047685693949, 0.000106950850749854, 0.00019125286780763417, 0.00021375382493715733, 0.00013937646872363985, 0.00019653832714539021, 0.00014830361760687083, 0.00016635158681310713, 7.2515089414082468e-05, 0.00023258164583239704, 0.00013957463670521975, 0.00017643747560214251, 0.00022168116993270814, 0.00010939148342004046, 0.00010768420179374516, 0.00011435617489041761, 0.00024236558238044381, 0.00013170644524507225, 0.00027186571969650686, 0.00010488777479622513, 0.0001300292497035116, 0.00019930858979932964, 9.6301228040829301e-05, 0.00027212544227950275, 0.00024965000920929015, 0.00012324098497629166, 0.00011192837700946257, 0.00021651135466527194, 0.00019193516345694661, 0.00011949564213864505, 0.0001273461093660444, 0.00024039557320065796, 7.3017625254578888e-05, 0.00011944958532694727, 0.00022409792291000485, 0.00020321740885265172, 0.00020708101510535926, 0.00013387935177888721, 0.00023148549371398985, 0.00012837086978834122, 0.00016278118710033596, 0.00012178295582998544, 0.0002686874067876488, 0.00015177272143773735, 0.00039983715396374464, 0.00011162850569235161, 0.00016963211237452924, 0.00012185842206235975, 0.00019750829960685223, 0.00015037870616652071, 0.00020883517572656274, 0.00014705519424751401, 0.00015803963469807059, 8.6991778516676277e-05, 0.00014332846330944449, 0.00023388593399431556, 0.00019024361972697079, 0.0002321194187970832, 0.00016058115579653531, 5.1579714636318386e-05, 0.00010917725012404844, 0.000148068240378052, 0.00014856777852401137, 0.00012999511091038585, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -5,3,10,-27,126,18,19,-48,-1,15,-27,-36,-39,-8,4,27,-9,26,-22,-33,1,9,-88,56,-3,-6,-3,55,22,34,54,-13,-43,-9,36,-53,19,-43,-63,-6,13,-15,50,-49,0,64,-34,-16,-2,-2,-1,70,-58,67,18,-23,1,0,-2,1,-40,-13,-6,-2,25,-12,-34,-35,-1,25,4,4,9,12,19,21,-1,-33,127,-110,-127,12,-67,8,-6,-33,58,3,-63,-27,39,-25,9,22,-25,25, 3,27,102,-51,-35,-9,127,-95,11,-16,-47,27,-39,-10,-64,124,-9,79,25,-19,11,127,-1,94,15,-6,98,114,118,55,127,-35,-120,-28,-53,-21,12,-98,127,-127,-11,-75,13,-62,78,-30,-42,28,5,-8,30,110,-68,71,-110,6,-85,4,-9,36,-38,-127,-121,-35,-26,-3,5,-95,-20,15,4,106,-127,-10,6,-11,-127,-117,4,-92,-60,23,-8,-25,53,93,-48,16,-65,0,47,-18,12,98,-45,-49, -81,1,119,-55,73,-20,81,-56,-5,-9,-36,-38,-37,-19,-12,-49,0,15,-64,-50,-3,16,-36,40,-28,-6,80,28,36,16,5,-13,-45,-12,25,96,22,-33,-120,10,14,-27,122,-22,-8,-71,-92,-11,-19,-13,3,44,17,0,-7,-27,33,-8,14,-2,-10,-9,-76,-18,-40,-48,126,-23,15,17,-50,34,31,4,4,37,-50,7,-46,17,-63,-14,-127,1,-22,0,122,-14,-59,-35,62,49,25,73,1,30, 
  /* [0][1][][] */ -53,0,54,-27,94,125,-22,-36,7,-25,-35,-124,-127,6,0,68,-2,71,127,15,69,-20,67,-24,45,25,127,49,-39,16,4,-34,-127,-25,127,-44,9,-53,-94,-105,3,25,127,-59,-47,127,-61,-81,68,52,32,-57,-104,127,-1,-13,0,-18,46,3,-23,8,71,-54,25,17,-11,-76,-5,-24,-127,26,33,127,4,-77,-56,-103,-41,-116,-35,-23,-59,-19,15,28,-101,71,-97,127,113,-127,127,-39,-86,26, 72,127,127,127,-127,-127,79,-36,127,127,-71,-76,-40,127,-4,127,127,-127,125,127,127,-76,17,-127,-127,-127,80,127,-127,127,-22,127,1,127,107,-110,127,59,-12,-57,127,22,-118,-107,127,-5,127,127,127,-127,127,-127,106,78,-127,127,-127,127,-127,127,-127,100,90,-127,127,127,-22,127,-90,-127,11,-127,14,72,127,49,32,-127,85,-127,81,127,69,127,127,72,-127,127,-127,63,9,-58,-92,-36,-89,-10, -127,-10,99,-40,25,52,-19,5,-26,10,-10,122,-126,5,2,34,-3,76,112,0,28,-28,127,-21,12,24,87,32,-8,-14,18,-7,-22,-37,87,127,19,-42,-114,-76,-14,4,29,-25,-53,-91,-20,-58,5,68,16,-42,127,-79,42,-39,21,-14,62,-22,-36,-11,-127,-62,-34,-12,-40,-111,0,-16,-58,-3,0,-84,-9,127,-106,-60,-32,45,-48,-29,-54,-43,-12,32,-71,73,-76,-59,127,86,-15,-3,-89,12, 
  /* [0][2][][] */ -42,-26,19,-2,27,30,7,55,-1,-8,29,-127,13,-23,-27,-1,1,-6,-66,-36,7,-32,8,-36,-14,-3,-33,5,-24,7,-20,13,-82,-8,38,-48,24,-15,-46,-15,-1,9,-1,36,44,32,-1,-10,6,16,-13,-46,1,29,-25,-14,3,-8,16,-3,3,11,11,11,6,-16,127,8,43,15,-18,18,-17,18,-39,-39,11,-8,-28,-91,-68,4,-85,7,-20,2,62,-22,49,29,16,-36,-6,-50,8,19, 13,-48,33,-70,-35,-6,33,127,-54,36,127,-17,-65,36,127,94,-1,-14,75,-59,-6,-24,55,-18,-3,-15,82,21,8,30,-93,-23,-48,-27,-55,-36,-46,-69,31,-126,-4,-127,-78,127,35,-25,29,2,14,-7,-5,-51,30,63,-112,-23,-58,-34,34,-34,97,48,109,-2,-35,-43,-6,-77,127,17,-14,38,5,-7,-20,-35,9,-72,9,33,-78,-42,-41,-22,23,-127,28,3,36,23,49,-28,14,-127,-127,127, -51,24,55,7,68,-25,16,32,-21,-22,16,59,15,-18,-26,-26,8,25,14,-19,5,11,95,-33,-2,-27,24,5,4,2,-32,15,-16,3,14,-13,11,-127,-63,13,-9,-17,-9,20,19,-67,-25,13,6,1,-15,-25,-7,-62,-19,13,19,0,30,-4,0,24,1,9,-7,-38,-12,-61,38,1,-41,13,-84,-40,-31,3,3,-4,107,22,-64,-18,-5,18,-31,7,73,10,29,12,3,-1,14,-1,-25,27, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0035873409360647202, 0.015688402578234673, 0.0028168570715934038, 0.0090915067121386528, 0.0071537024341523647, 0.021886631846427917, 0.0043223104439675808, 0.0088760964572429657, 0.012346540577709675, 0.017196984961628914, 0.011770951561629772, 0.005899449810385704, 0.003431329969316721, 0.010090773925185204, 0.019244018942117691, 0.0057938075624406338, 0.011524644680321217, 0.01908162422478199, 0.0076084686443209648, 0.021442927420139313, 0.0062026623636484146, 0.017915967851877213, 0.0055081155151128769, 0.0073758331127464771, 0.096212700009346008, 0.0049468944780528545, 0.00434908177703619, 0.0036022642161697149, 0.01814645528793335, 0.0053316392004489899, 0.0087946746498346329, 0.016869265586137772, 0.002381638390943408, 0.021860195323824883, 0.0043435972183942795, 0.0076682036742568016, 0.0093898344784975052, 0.004106700886040926, 0.0040287873707711697, 0.0032542222179472446, 0.020721219480037689, 0.0067090224474668503, 0.0089623546227812767, 0.0052880304865539074, 0.0054516182281076908, 0.0090625220909714699, 0.014174621552228928, 0.020115643739700317, 0.011143818497657776, 0.026944011449813843, 0.0094843804836273193, 0.010062064975500107, 0.0090969344601035118, 0.015564173460006714, 0.0070538823492825031, 0.013858510181307793, 0.00566874910145998, 0.027553793042898178, 0.030254056677222252, 0.015034275129437447, 0.0067157135345041752, 0.012992867268621922, 0.0084012961015105247, 0.0045676464214920998, 0.01490104291588068, 0.018371734768152237, 0.008026784285902977, 0.0043782377615571022, 0.01197329256683588, 0.014436740428209305, 0.0095099452883005142, 0.017685091122984886, 0.015767170116305351, 0.0098980376496911049, 0.0068673854693770409, 0.01017792709171772, 0.0038884275127202272, 0.0036565321497619152, 0.0060648252256214619, 0.0049986261874437332, 0.0044281762093305588, 0.01998119056224823, 0.0048318151384592056, 0.031666465103626251, 0.0059025450609624386, 0.016253018751740456, 0.011276214383542538, 0.0077178957872092724, 0.0035374308936297894, 0.0098872799426317215, 0.0027385873254388571, 0.015050821006298065, 0.014577061869204044, 0.0080793779343366623, 0.0033352377358824015, 0.009375888854265213, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 8789, -3147, -12887, 5254, -4445, -499, 463, -132, 443, -2459, 1516, 2146, 10161, -1948, -922, -8129, -1628, -5376, -4940, 2512, -5604, -311, -3733, 2099, -50, 7260, -20504, -12850, 274, -5321, -1540, -753, 18546, 1539, -8511, 1379, -4767, 8540, 11131, 12827, -4911, 3585, -2671, 5469, -1905, 1425, 2414, -124, -5129, -233, -4292, 2822, -2048, -1773, 10736, 1230, 4078, -960, -758, -1232, 1949, -1198, 1299, 7240, -1054, 93, 6487, 17037, -3919, 1214, 6690, -2197, 586, -193, -1523, -1235, 12861, 16860, 7287, 17161, 9508, -155, 9111, -970, 579, -3033, 3094, -6266, 12992, -1555, -11918, 6708, -3459, 1105, 20710, -7636, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 8.4408020484261215e-05, 0.00036913889925926924, 6.6278989834245294e-05, 0.0002139178104698658, 0.00016832241090014577, 0.00051497959066182375, 0.0001017014219542034, 0.00020884933474007994, 0.00029050683951936662, 0.00040463494951836765, 0.00027696357574313879, 0.00013881058839615434, 8.0737176176626235e-05, 0.00023742998018860817, 0.00045280045014806092, 0.00013632488844450563, 0.00027116810088045895, 0.00044897940824739635, 0.00017902279796544462, 0.00050453946460038424, 0.00014594499953091145, 0.00042155219125561416, 0.00012960271851625293, 0.00017354902229271829, 0.0022638281807303429, 0.00011639751755865291, 0.00010233133798465133, 8.4759158198721707e-05, 0.00042697542812675238, 0.00012545032950583845, 0.00020693353144451976, 0.00039692388963885605, 5.6038552429527044e-05, 0.00051435752538964152, 0.00010220229160040617, 0.00018042832380160689, 0.00022093729057814926, 9.6628260507714003e-05, 9.4794995675329119e-05, 7.6569936936721206e-05, 0.00048755810712464154, 0.00015785935102030635, 0.00021087893401272595, 0.00012442424485925585, 0.00012827337195631117, 0.00021323582041077316, 0.00033352052560076118, 0.00047330927918665111, 0.00026220749714411795, 0.00063397677149623632, 0.00022316190006677061, 0.00023675448028370738, 0.00021404551807790995, 0.00036621585604734719, 0.0001659737026784569, 0.00032608260517008603, 0.00013338233111426234, 0.00064832455245777965, 0.00071186019340530038, 0.00035374765866436064, 0.00015801678819116205, 0.0003057145222555846, 0.00019767755293287337, 0.00010747403575805947, 0.00035061276867054403, 0.00043227610876783729, 0.00018886550969909877, 0.00010301735892426223, 0.00028172452584840357, 0.00033968800562433898, 0.00022376341803465039, 0.00041611978667788208, 0.00037099223118275404, 0.0002328950067749247, 0.00016158554353751242, 0.00023948063608258963, 9.1492416686378419e-05, 8.6036052380222827e-05, 0.00014270177052821964, 0.0001176147343358025, 0.00010419238242320716, 0.0004701456637121737, 0.00011368976993253455, 0.00074509333353489637, 0.00013888342073187232, 0.00038242398295551538, 0.00026532268384471536, 0.00018159755563829094, 8.3233666373416781e-05, 0.00023264189076144248, 6.4437350374646485e-05, 0.00035413698060438037, 0.00034298968967050314, 0.00019010301912203431, 7.8476186899933964e-05, 0.00022060915944166481, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 10,29,4,36,10,-72,-2,1,-64,-64,18,-5,55,-58,83,11,-86,-46,25,-45,89,24,-39,-22,-9,32,127,79,5,71,53,-38,-6,-14,0,-79,41,52,-1,-19,112,22,8,-30,-6,-26,-10,-97,10,-26,89,-23,-79,36,24,0,31,-19,-9,67,-39,32,-93,-10,1,1,80,42,14,-14,64,18,-8,45,9,10,46,-37,54,16,10,62,44,56,-44,-8,-37,95,11,11,-76,-2,-7,37,125,63, 
  /* [1][0][][] */ 38,53,-32,3,44,-49,68,-110,-77,-48,-72,-33,12,-24,3,-32,-25,-8,-30,-34,-30,-94,127,-67,28,-12,12,39,-38,31,-33,-5,-31,1,4,-62,-15,92,-29,90,30,16,-57,-23,56,-93,-64,41,-75,-5,47,-118,-74,19,61,51,47,33,-85,21,-50,-33,-73,-16,21,36,111,22,-38,-117,54,-17,23,30,-28,-10,-63,-15,100,-13,61,-16,60,-4,-10,-80,-19,5,-35,-22,53,5,63,-37,-17,92, 
  /* [2][0][][] */ -4,-27,9,18,78,94,-59,104,-30,59,88,12,37,1,58,21,23,-19,-87,29,-18,-28,-11,44,-5,-29,-57,31,-28,-5,2,96,-16,-6,-12,76,-15,21,-2,-62,86,-9,38,61,13,115,62,30,-127,26,-14,58,21,35,32,-27,31,44,26,19,-32,-7,53,33,42,-1,-35,18,-5,-16,-67,-21,44,96,44,71,-52,-38,-22,-50,11,36,68,5,-9,-30,16,-62,-41,-26,-24,96,-15,6,90,-15, 
  /* [3][0][][] */ 22,-54,-42,-127,1,-16,127,-22,8,121,-58,16,11,-2,-11,58,47,32,-46,28,-32,22,28,-24,-18,99,10,8,-3,-2,-60,79,-17,-2,23,-18,18,-44,-11,49,2,22,-69,7,68,-47,11,65,36,-13,12,-37,115,62,17,0,3,-43,20,-21,-47,35,79,-14,-41,-32,74,-16,-34,-8,-40,43,-20,-75,17,-93,-1,-46,95,-17,-46,-35,-47,-39,-11,-49,79,91,-52,48,-23,5,9,-65,-11,33, 
  /* [4][0][][] */ -27,76,28,11,-22,16,-36,-28,28,-46,2,-5,-3,45,-12,23,-17,-24,-24,-61,24,-24,-83,35,-26,-15,-29,12,-65,127,-56,-18,10,-38,-9,31,87,6,-56,15,14,-3,43,-53,-52,18,34,-16,48,-27,-95,7,-85,-19,64,24,22,38,-8,5,-42,-87,5,5,64,15,-70,-24,6,-28,-5,-68,1,80,48,70,-9,5,-73,40,33,52,6,-91,22,-72,-15,-98,-44,-60,-64,-65,14,-6,22,-24, 
  /* [5][0][][] */ -13,2,22,-13,-1,-8,-18,3,27,28,-16,2,-23,-19,38,-20,1,26,-26,-36,-16,34,4,-6,17,-40,54,-11,-12,40,5,43,7,-64,8,-21,-29,-8,-23,-13,-31,8,-26,8,1,5,-71,-4,-28,4,51,-33,10,-52,16,7,-2,-31,0,-19,31,10,-4,31,-30,3,118,-14,-10,-10,23,9,0,8,27,12,27,-23,127,17,-5,-15,-30,27,51,53,3,90,4,-31,-5,15,10,24,-14,34, 
  /* [6][0][][] */ 42,-29,80,1,-21,69,-8,-119,-24,-70,-112,61,8,6,-62,70,-10,-13,-22,-24,-50,-53,-67,-34,4,-28,8,60,-127,55,-36,-22,40,35,-4,4,1,-21,78,-4,-78,67,29,-67,20,54,-95,14,42,42,-84,-120,38,-26,-43,-10,44,-27,7,-23,-13,-64,32,5,23,-60,-96,-56,-68,-15,-37,-69,-15,-82,51,-84,45,35,-73,21,-29,56,28,-56,92,-60,-41,14,-87,72,-59,74,-4,-48,60,-98, 
  /* [7][0][][] */ -28,12,-63,68,-10,-10,40,-51,-67,-1,63,72,-27,-60,-8,-44,-21,12,-9,20,-49,-9,-30,-38,87,32,-6,43,-10,14,-1,21,-24,-112,47,100,-3,9,-52,-4,-13,9,-23,-52,28,49,30,66,-29,57,-42,-10,-7,-74,43,-55,20,41,-60,-38,11,-3,-7,-34,62,-7,127,-9,-23,-19,89,9,-13,-21,-52,-33,58,-45,106,-48,36,-21,-78,-6,36,23,-73,58,-31,19,-16,12,52,0,62,0, 
  /* [8][0][][] */ -4,-57,26,2,-24,-6,-5,14,7,-7,36,40,31,16,-35,12,85,1,36,-4,-36,-57,-37,-21,-33,-31,70,-6,7,40,17,-35,-10,-4,-5,-10,-55,-23,8,-45,9,14,19,-16,8,7,50,-10,39,-20,74,24,-3,-1,-53,14,-38,115,-78,-20,-9,-48,-40,-26,-57,-23,-1,10,-21,19,28,-24,-21,-127,36,-77,9,1,-50,29,-34,-25,-11,39,61,-37,-36,31,-26,85,1,-9,-35,-9,17,-56, 
  /* [9][0][][] */ -23,-14,-33,12,-1,34,-1,37,-29,1,74,62,-16,66,58,-48,-1,60,-27,-49,27,55,-22,2,-12,20,-14,11,42,-15,29,-1,-8,10,-31,54,-16,-21,1,12,-6,-13,-14,13,29,53,1,42,-48,-9,-12,35,127,6,12,24,-1,-42,56,15,-17,3,98,21,31,9,65,-10,8,17,-35,26,13,-98,-40,-110,-35,-3,55,7,-18,33,19,-55,49,9,-25,7,-2,84,53,53,37,35,-10,43, 
  /* [10][0][][] */ 20,50,32,10,-32,9,-57,-12,66,10,-60,6,35,18,-19,-52,-20,5,18,-8,9,-16,-1,-46,1,-40,-89,29,-7,51,-6,5,27,19,-30,-6,-11,6,21,-7,44,-16,46,-73,-51,-25,34,30,11,6,5,-45,-30,-16,-21,36,-18,16,-14,-23,-29,-29,-58,7,-13,-23,-127,-39,-41,-28,52,-36,-38,50,35,20,70,-18,-90,26,-4,49,-7,-6,21,-7,-100,-104,-39,15,29,61,35,-20,8,-14, 
  /* [11][0][][] */ -2,-42,12,-26,-59,23,16,30,69,-16,-10,-29,19,10,13,11,-24,50,3,-47,-1,22,-4,-5,25,12,46,-4,66,-61,-17,25,4,102,-74,37,8,-29,33,-15,-24,22,7,9,-45,12,17,7,44,-21,-15,3,-3,6,-85,79,-14,9,-1,-42,20,35,21,-65,9,-47,-127,-68,-1,-18,-94,19,44,28,-2,0,13,42,-104,-25,-8,0,-26,-25,-36,7,50,54,5,-37,-1,16,-15,31,59,-4, 
  /* [12][0][][] */ 8,4,-43,-14,32,-17,23,35,30,-46,22,0,6,-12,-10,-6,-4,-61,-48,25,23,49,-1,41,-34,-10,-127,1,47,-16,19,13,-28,-64,93,-28,44,2,8,7,-39,-41,30,16,52,-2,34,-27,-72,19,-73,110,72,-50,18,-88,35,38,-51,-20,4,20,71,-3,-25,-22,15,39,125,23,43,41,-8,-2,-1,-7,-49,-63,30,-77,56,-35,38,-22,11,-14,-14,-97,-22,38,-25,10,-15,57,22,20, 
  /* [13][0][][] */ -25,28,-93,35,58,24,9,-6,12,68,-50,64,-38,-1,57,-63,-3,55,59,4,-16,-38,22,-2,38,24,-17,33,-10,64,62,-16,-10,69,-4,20,31,-21,-38,-62,14,5,-27,-14,58,30,-31,54,-60,46,3,-18,-32,-60,59,44,36,-29,-33,-15,13,1,-29,-41,-5,79,127,46,32,-26,-33,-29,15,69,-64,33,12,-84,124,-63,5,-17,32,17,64,52,-73,-3,-30,-33,31,38,31,42,72,72, 
  /* [14][0][][] */ -16,34,-9,25,-60,-26,14,83,-47,-6,92,-12,-127,-1,65,-21,-66,49,-50,50,-12,33,-99,-2,-29,-5,-54,-89,41,-10,14,100,-82,47,36,-21,-14,-74,-5,-43,29,-48,51,1,-5,102,-29,27,-15,-23,95,12,11,51,-54,31,-89,30,3,38,52,80,50,34,19,-41,-12,-84,53,65,59,58,-41,41,19,3,2,-6,33,8,-58,122,-2,-118,70,4,20,-5,-100,-2,-26,-8,-8,43,43,12, 
  /* [15][0][][] */ 64,-26,15,22,36,-44,0,-22,-11,27,-47,-16,14,50,-34,-17,-31,-5,-99,24,-10,-53,17,8,64,-23,77,5,25,-26,-55,42,62,14,4,-108,46,53,45,58,65,36,-51,-14,-27,-127,16,-15,3,14,-30,-17,-35,-29,-18,32,3,4,-10,26,9,-36,-44,52,6,33,-87,15,-15,-11,4,-14,-3,-122,-39,-94,-8,31,-93,25,73,-32,21,17,-42,19,-17,-9,42,80,25,-49,-7,-21,-1,-41, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0036403625272214413, 0.0029402484651654959, 0.0017202760791406035, 0.0020351733546704054, 0.0027555499691516161, 0.0066858399659395218, 0.0021365066058933735, 0.0029453574679791927, 0.0024443014990538359, 0.0044633741490542889, 0.0030047998297959566, 0.0036619054153561592, 0.00290257902815938, 0.0029827018734067678, 0.0025937880855053663, 0.0033359220251441002, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -25459, -6697, -10925, -13317, 17775, -17248, 24659, -11218, 7538, -15502, 19583, 13207, -685, -27541, -3920, 12556, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 8.5655592556577176e-05, 6.9182315201032907e-05, 4.0477083530277014e-05, 4.7886431275401264e-05, 6.4836473029572517e-05, 0.00015731388702988625, 5.0270744395675138e-05, 6.9302528572734445e-05, 5.7512977946316823e-05, 0.00010502056829864159, 7.0701171352993697e-05, 8.6162479419726878e-05, 6.8295979872345924e-05, 7.0181224145926535e-05, 6.1030310462228954e-05, 7.8492281318176538e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -51,65,-17,-2,11,-25,3,-59,87,-127,88,-123,114,-114,-42,-116, 
  /* [1][0][][] */ -75,30,-127,-79,-48,-49,40,-26,-68,-13,119,53,52,123,49,74, 
  /* [2][0][][] */ -26,41,-87,22,-36,0,42,-67,-70,78,66,4,15,52,-16,127, 
  /* [3][0][][] */ -63,-82,36,-57,-85,0,-48,-127,23,16,44,-77,-38,-48,-127,-64, 
  /* [4][0][][] */ 57,21,10,40,-82,-23,-127,57,-23,52,9,22,47,18,-12,-36, 
  /* [5][0][][] */ -32,16,-73,-37,31,-17,-9,-65,88,-37,35,-75,13,-69,-127,-59, 
  /* [6][0][][] */ -20,-7,-42,45,-78,57,58,-58,-26,-49,127,-15,17,14,-50,23, 
  /* [7][0][][] */ -28,53,102,-43,40,57,-25,-8,49,56,-127,-50,86,28,12,54, 
  /* [8][0][][] */ -79,-12,19,28,68,-27,127,74,-56,10,8,-57,75,115,-41,-14, 
  /* [9][0][][] */ 41,-19,36,1,-34,-8,-77,-41,25,41,127,52,-48,-37,43,-30, 
  /* [10][0][][] */ 31,-38,-8,-69,-127,8,35,-40,-43,-88,-11,58,-10,51,-63,33, 
  /* [11][0][][] */ 57,-90,8,81,-82,-49,84,-37,81,115,-19,35,32,-52,6,127, 
  /* [12][0][][] */ -73,-40,111,0,53,30,57,62,20,-14,127,71,2,101,-111,15, 
  /* [13][0][][] */ 11,-8,21,-24,8,-44,108,19,-127,8,-34,42,-57,82,74,-58, 
  /* [14][0][][] */ 127,-48,59,-11,72,64,123,56,55,-10,91,61,73,-20,45,-1, 
  /* [15][0][][] */ -4,127,31,-74,47,96,-93,21,-12,-11,-68,-15,-80,94,-54,-93, 
  /* [16][0][][] */ -16,81,95,-36,11,121,14,-13,-28,-16,2,93,84,18,109,127, 
  /* [17][0][][] */ 22,104,43,-127,5,2,65,-120,-104,71,26,57,-11,36,104,-20, 
  /* [18][0][][] */ -11,30,-87,-73,85,94,-41,-53,18,94,121,40,-28,127,-29,24, 
  /* [19][0][][] */ 47,126,61,91,43,-55,10,49,-64,127,67,98,102,90,-34,60, 
  /* [20][0][][] */ 127,-51,-11,24,-84,-113,-40,30,-28,-71,-116,-76,95,-68,34,4, 
  /* [21][0][][] */ -42,-101,-50,127,-46,-27,-120,86,22,31,11,50,-30,14,-41,8, 
  /* [22][0][][] */ -35,28,-54,10,113,-2,38,3,37,46,52,127,34,70,7,49, 
  /* [23][0][][] */ -64,-7,-25,-6,50,71,71,104,3,127,-31,-28,-47,-7,-74,-54, 
  /* [24][0][][] */ 2,-95,97,-9,127,17,51,-42,126,44,37,4,-120,-36,3,-89, 
  /* [25][0][][] */ 23,-72,84,-22,72,-36,-11,44,127,-72,-36,-36,100,-66,31,60, 
  /* [26][0][][] */ 27,8,98,49,42,-101,-92,0,24,37,24,127,-3,-92,59,-42, 
  /* [27][0][][] */ -29,25,-67,40,-69,110,3,-117,37,-97,102,14,59,-40,127,78, 
  /* [28][0][][] */ -47,55,-57,-127,18,-75,31,-43,-85,57,-53,35,-12,24,-42,19, 
  /* [29][0][][] */ 49,112,-105,68,29,116,-6,15,47,65,42,98,-107,46,15,127, 
  /* [30][0][][] */ 21,44,-127,-29,48,-44,-5,-3,-40,-31,-9,16,38,0,1,122, 
  /* [31][0][][] */ 23,-66,56,0,93,-97,-69,56,-17,-6,19,-23,-98,8,12,127, 
  /* [32][0][][] */ -4,50,-8,21,-83,24,-15,62,-18,-127,0,-86,48,56,33,60, 
  /* [33][0][][] */ -58,8,22,94,10,34,-13,22,-38,-29,31,-19,17,7,-3,127, 
  /* [34][0][][] */ -34,38,-115,-123,77,15,4,122,18,1,-32,-86,-69,-13,-55,127, 
  /* [35][0][][] */ 79,-20,25,26,3,34,-112,37,-33,-127,-19,26,33,-10,73,-43, 
  /* [36][0][][] */ -4,2,-127,-24,34,124,9,15,-16,-6,41,18,28,30,-84,52, 
  /* [37][0][][] */ 79,8,25,-31,11,-99,13,25,-127,69,-64,-43,31,38,107,19, 
  /* [38][0][][] */ -43,127,20,-29,31,43,65,-82,8,8,-85,48,-68,-74,-75,7, 
  /* [39][0][][] */ 94,35,-88,-100,-9,-30,-7,-99,-22,-10,-21,-51,31,8,-127,-64, 
  /* [40][0][][] */ -31,2,-70,-60,-53,-20,30,-127,7,-10,26,-26,17,30,29,79, 
  /* [41][0][][] */ -29,-102,-23,127,2,-34,-123,-5,-20,-44,84,-43,-69,-27,9,22, 
  /* [42][0][][] */ -23,43,-11,-127,18,76,-31,10,72,58,-60,6,101,-42,6,-13, 
  /* [43][0][][] */ -14,48,-14,-16,127,-34,31,28,-6,42,10,-39,-92,-30,5,1, 
  /* [44][0][][] */ 25,-30,9,-2,-26,13,23,48,16,-79,42,-40,127,13,-78,-14, 
  /* [45][0][][] */ 21,-50,-48,52,-39,-57,11,43,1,-22,25,47,-58,127,42,-34, 
  /* [46][0][][] */ -22,-88,30,22,33,-14,-127,68,6,-30,89,19,27,90,62,52, 
  /* [47][0][][] */ -59,-122,29,81,25,6,108,28,-9,-85,-119,-115,74,-29,-127,2, 
  /* [48][0][][] */ -120,75,-2,19,-42,86,2,-127,38,-16,13,-81,86,-109,-34,1, 
  /* [49][0][][] */ -51,0,37,-32,-17,18,127,53,-15,-22,3,-9,-9,39,-50,22, 
  /* [50][0][][] */ 80,31,-90,43,23,-127,-10,3,-89,65,-10,-10,9,-53,-89,-20, 
  /* [51][0][][] */ -72,77,-52,115,-10,68,-33,-76,-21,-99,53,-7,-15,64,-9,127, 
  /* [52][0][][] */ -108,11,-19,-29,47,8,59,7,-7,-71,-49,-19,-127,-50,-122,-3, 
  /* [53][0][][] */ -34,-47,-46,-127,-6,9,-1,93,51,-61,-28,42,-48,5,17,55, 
  /* [54][0][][] */ 9,-22,24,-33,-10,49,26,0,2,-71,38,12,-47,-15,-127,21, 
  /* [55][0][][] */ -84,-14,-71,82,76,-56,114,111,-113,-91,-127,-53,83,-3,-15,99, 
  /* [56][0][][] */ 127,-22,-105,-17,-117,8,-94,-32,-22,-47,-19,-33,110,-27,36,63, 
  /* [57][0][][] */ -61,-21,0,13,118,75,48,81,-20,53,34,-50,18,127,-111,-19, 
  /* [58][0][][] */ 21,-7,12,7,10,-17,-22,-76,33,-127,-52,2,-31,-17,5,42, 
  /* [59][0][][] */ 15,-19,-11,-26,2,56,-127,-33,116,98,-86,-15,-67,-60,-53,-15, 
  /* [60][0][][] */ -1,-60,47,2,-127,-67,46,-27,2,55,8,26,-13,-68,-4,41, 
  /* [61][0][][] */ -1,49,-91,-10,-64,-24,-117,-70,-17,5,30,83,57,-48,127,57, 
  /* [62][0][][] */ 23,35,48,1,-17,16,29,105,-90,127,-7,122,6,63,97,79, 
  /* [63][0][][] */ 39,-127,-1,-7,-83,13,26,-23,0,-1,-11,12,-51,92,109,14, 
  /* [64][0][][] */ 6,-20,-67,-45,2,46,-7,-32,-30,-127,43,16,35,-46,-54,80, 
  /* [65][0][][] */ -22,-4,-15,52,93,-39,125,32,-46,-1,-100,-6,43,127,-70,12, 
  /* [66][0][][] */ -19,-127,15,-109,-40,-90,14,-38,12,-53,-16,94,-84,-56,-75,50, 
  /* [67][0][][] */ -35,-30,-40,15,-66,127,7,-65,-105,6,-28,-89,29,36,-50,17, 
  /* [68][0][][] */ 117,20,29,-23,-96,-12,-52,-127,-43,-127,-44,41,-9,-48,43,-50, 
  /* [69][0][][] */ 10,5,26,-14,-13,-39,-39,42,-3,127,-28,-1,-9,13,45,-38, 
  /* [70][0][][] */ 2,-48,-7,40,-102,29,-18,-83,35,127,13,59,45,-38,9,29, 
  /* [71][0][][] */ 126,-68,57,79,-46,2,44,-32,70,-22,-36,46,127,-8,7,10, 
  /* [72][0][][] */ -16,-70,49,97,72,-31,-127,64,45,-3,54,22,-13,-32,-57,60, 
  /* [73][0][][] */ 23,22,42,-127,117,-90,-45,7,-25,111,-19,-3,-17,-86,-27,-10, 
  /* [74][0][][] */ 52,-29,30,40,-127,-55,44,16,-61,-55,35,-15,68,-78,16,53, 
  /* [75][0][][] */ 14,127,-90,19,76,34,-1,-25,-15,-9,12,68,-123,44,9,72, 
  /* [76][0][][] */ -118,-57,4,-28,-75,-2,98,-27,-40,67,69,30,-56,-127,-6,79, 
  /* [77][0][][] */ -34,127,-18,44,3,-48,24,66,41,-31,-41,3,-31,24,-25,96, 
  /* [78][0][][] */ 109,18,-50,-15,-70,16,-127,-4,-25,2,-40,2,30,-82,23,70, 
  /* [79][0][][] */ -63,-10,59,77,-47,-88,-21,-98,-14,-4,-9,-5,-43,127,-35,107, 
  /* [80][0][][] */ 110,81,25,-44,-42,-4,89,-94,25,50,-74,35,127,-31,59,30, 
  /* [81][0][][] */ 80,-76,41,-51,33,94,-24,126,96,66,-40,-127,52,35,-69,-113, 
  /* [82][0][][] */ 31,9,30,-44,127,-51,64,12,-17,70,19,35,-19,-12,12,-110, 
  /* [83][0][][] */ -64,69,24,15,49,20,127,20,-8,10,-47,-45,4,92,-34,-57, 
  /* [84][0][][] */ -16,-67,-21,76,32,-35,-88,33,-118,102,-87,0,-127,46,-52,-83, 
  /* [85][0][][] */ -100,50,-18,54,-26,-112,-74,-127,-84,94,-2,-50,-102,-86,11,91, 
  /* [86][0][][] */ -15,22,89,80,39,1,66,-2,21,14,-5,-67,0,70,-127,-84, 
  /* [87][0][][] */ 2,38,127,-31,-100,-4,-6,-5,30,-20,14,22,-38,-5,-1,-34, 
  /* [88][0][][] */ -65,-30,-66,22,18,-3,21,24,2,-92,-127,-74,112,-24,58,48, 
  /* [89][0][][] */ 28,20,17,-113,-16,-10,-22,52,127,-7,51,-90,30,-8,49,-102, 
  /* [90][0][][] */ 1,57,42,-27,-35,7,16,92,54,-78,18,127,-2,-50,-55,55, 
  /* [91][0][][] */ -61,0,-13,83,97,55,-31,-105,-33,-5,16,-19,-117,-127,-57,6, 
  /* [92][0][][] */ -65,32,-28,36,-127,-16,-13,-21,-29,75,89,107,45,6,78,44, 
  /* [93][0][][] */ 59,24,85,46,-127,-78,9,46,9,-42,-43,-71,18,-63,6,22, 
  /* [94][0][][] */ -7,-127,48,-94,24,79,-36,-15,119,-58,-9,59,16,58,-75,32, 
  /* [95][0][][] */ -27,-86,-2,-94,127,60,-63,56,113,41,-73,81,-66,62,-44,40, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00081736862193793058, 0.0028948518447577953, 0.0021900951396673918, 0.0022715269587934017, 0.0020908159203827381, 0.0015369065804407001, 0.00098535849247127771, 0.003057107562199235, 0.0014297162415459752, 0.0012269460130482912, 0.0037416673731058836, 0.0021145506761968136, 0.0016969090793281794, 0.0023275434505194426, 0.0030105286277830601, 0.002717859111726284, 0.0023066378198564053, 0.0016311627114191651, 0.0026366517413407564, 0.0016855988651514053, 0.0015801937552168965, 0.0014600277645513415, 0.0015944740734994411, 0.0020311246626079082, 0.0014634316321462393, 0.0026643865276128054, 0.00099542690441012383, 0.0014316173037514091, 0.0018876028480008245, 0.0022184050176292658, 0.0014713514829054475, 0.0016183725092560053, 0.0017419984797015786, 0.0034097100142389536, 0.00098019908182322979, 0.0019868994131684303, 0.0026445933617651463, 0.0013283932348713279, 0.0027272780425846577, 0.0031198970973491669, 0.0036883745342493057, 0.0030523943714797497, 0.0033024726435542107, 0.0024129420053213835, 0.0029182948637753725, 0.0033394729252904654, 0.0022265398874878883, 0.0012928559444844723, 0.0016045985976234078, 0.0029850113205611706, 0.001578120281919837, 0.0016364579787477851, 0.0018211198039352894, 0.0023815273307263851, 0.0025095841847360134, 0.0015287798596546054, 0.0015360359102487564, 0.0013738531852141023, 0.0019738283008337021, 0.0021648607216775417, 0.0035276294220238924, 0.0011429676087573171, 0.0013175149215385318, 0.0022663369309157133, 0.0026272069662809372, 0.0012542069889605045, 0.0015742924297228456, 0.0017370325513184071, 0.001715901424176991, 0.0029775793664157391, 0.0026841966900974512, 0.0020129666663706303, 0.0025366446934640408, 0.0014095855876803398, 0.0022981180809438229, 0.0020506440196186304, 0.0020983736030757427, 0.0034029860980808735, 0.0019768034107983112, 0.0017864248948171735, 0.0024516370613127947, 0.0016906149685382843, 0.0019544260576367378, 0.00219554896466434, 0.0012640295317396522, 0.0014380645006895065, 0.0019425774225965142, 0.0024014499504119158, 0.0012510751839727163, 0.0019084133673459291, 0.0026879573706537485, 0.0020975940860807896, 0.0012823200086131692, 0.0019501000642776489, 0.0026315795257687569, 0.0019673476926982403, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 9789, 1361, 512, -382, 3063, 4159, 8196, 480, -905, 7056, 378, -2400, 3220, 2084, 79, -65, 2530, 4545, -325, -237, 3765, 5142, 4398, -1228, -4211, -566, 8027, 379, 1370, 801, 4884, -1648, 3495, 1125, 7764, -2177, 625, -4234, 55, 684, 662, 1034, 1188, -493, 658, 844, 2264, 4899, 3152, 1542, 3707, 2660, -1808, 1531, 813, 1567, 446, 3011, 3654, 917, 1, 6992, 4657, 2637, 1592, 4492, -3030, 2672, 2815, -293, 2089, 1555, 1341, 2235, 1935, 1911, -1090, 676, 1435, 2564, 1831, 2739, 3267, 865, 3486, 3940, 473, -763, 6008, -652, 651, -1447, 5375, 2414, 226, -433, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 8.9433269749861211e-05, 0.00031674336059950292, 0.00023963162675499916, 0.00024854158982634544, 0.00022876888397149742, 0.00016816229617688805, 0.00010781406308524311, 0.00033449672628194094, 0.00015643394726794213, 0.00013424763164948672, 0.00040939857717603445, 0.00023136584786698222, 0.0001856691378634423, 0.00025467068189755082, 0.00032940023811534047, 0.00029737749719060957, 0.00025238326634280384, 0.00017847542767412961, 0.00028849209775216877, 0.00018443162844050676, 0.00017289860988967121, 0.0001597505179233849, 0.00017446110723540187, 0.00022223770793061703, 0.00016012295964173973, 0.00029152672505006194, 0.00010891571582760662, 0.00015664195234421641, 0.00020653411047533154, 0.00024272919108625501, 0.00016098951164167374, 0.00017707598453853279, 0.00019060264457948506, 0.00037307711318135262, 0.00010724954336183146, 0.00021739874500781298, 0.00028936105081811547, 0.00014534758520312607, 0.00029840809293091297, 0.00034136691829189658, 0.00040356747922487557, 0.00033398103551007807, 0.00036134361289441586, 0.00026401467039249837, 0.00031930839759297669, 0.00036539204302243888, 0.0002436192735331133, 0.00014145922614261508, 0.00017556888633407652, 0.00032660824945196509, 0.00017267174553126097, 0.00017905482673086226, 0.00019925979722756892, 0.0002605773916002363, 0.00027458887780085206, 0.00016727310139685869, 0.00016806702478788793, 0.00015032163355499506, 0.00021596855367533863, 0.00023687057546339929, 0.00038597939419560134, 0.0001250590430572629, 0.00014415732584893703, 0.00024797371588647366, 0.00028745870804414153, 0.00013723041047342122, 0.00017225291230715811, 0.00019005929061677307, 0.000187747209565714, 0.0003257950593251735, 0.0002936942910309881, 0.00022025092039257288, 0.00027754972688853741, 0.00015423132572323084, 0.00025145107065327466, 0.00022437343432102352, 0.00022959582565817982, 0.00037234139745123684, 0.00021629408001899719, 0.00019546360999811441, 0.00026824852102436125, 0.00018498046847525984, 0.00021384564752224833, 0.00024022837169468403, 0.00013830515672452748, 0.00015734738553874195, 0.00021254921739455312, 0.00026275723939761519, 0.00013688774197362363, 0.00020881112141069025, 0.0002941057609859854, 0.00022951052233111113, 0.00014030643797013909, 0.00021337230282370001, 0.00028793711680918932, 0.00021525948250200599, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 66,57,-9,15,-22,-48,46,68,90,-111,-87,98,23,-36,48,-40,-115,-6,21,55,13,89,60,102,5,-14,-25,-10,-17,-4,13,3,-24,-7,-66,81,35,123,11,-40,51,-14,2,11,-91,-21,-5,-77,-35,-58,112,21,27,43,-6,-15,-117,-116,-65,-127,-127,-83,-103,-29,-63,80,-5,-32,-4,39,73,-37,-17,6,127,-30,-10,-29,-87,20,46,4,49,-36,-22,-77,33,9,-44,91,0,5,79,-16,29,-2, -11,-33,10,127,23,75,-24,16,44,11,-35,115,-9,-86,-57,127,-30,26,41,127,100,-15,127,99,12,10,22,19,16,58,6,-127,76,101,-25,67,127,127,-9,-67,127,0,87,95,-54,-68,119,-127,-44,-125,-42,-25,3,117,-17,-127,6,8,-127,-111,-30,-106,-121,57,-25,120,72,-58,1,127,127,-38,-85,0,15,-127,41,-30,-42,127,-38,-69,127,-61,-58,-104,127,55,119,127,-65,-19,127,-66,127,78, 63,-81,18,-20,-15,-21,-29,120,18,38,9,-21,10,19,-53,-67,81,4,7,26,-7,54,86,100,14,-8,81,20,27,-38,6,-64,-16,-75,-76,37,-20,37,22,17,-7,82,8,76,-51,23,-6,-91,-19,52,19,-27,56,-74,-1,29,56,-127,-3,-45,-15,-34,-127,-42,77,1,-127,-35,1,-21,-7,13,-22,-43,-28,3,22,-9,-33,-9,-83,-127,69,2,-4,-34,66,3,-44,79,7,10,53,34,50,-35, 
  /* [0][1][][] */ 127,-39,17,109,-20,-69,118,7,21,-127,36,77,35,-127,-17,6,-125,-68,127,59,-127,-5,-76,-127,-3,33,-75,127,-101,38,127,90,3,91,-12,127,-123,95,-8,-75,51,-117,-6,54,-49,-107,16,-106,-127,-10,12,98,127,-98,51,-70,-127,-11,-105,-42,-33,-97,-19,47,-39,-26,36,-127,-54,17,-32,-127,-79,95,98,-78,127,127,-127,-79,127,-121,-29,105,-47,-42,5,127,31,29,-51,-8,36,-127,91,-38, -122,3,-43,67,-95,-127,-127,-121,57,-42,22,-13,-72,-111,-29,75,-127,-127,63,61,27,-127,-110,112,-127,127,23,85,-83,-51,-81,88,-127,127,127,-26,70,93,127,-28,-39,48,-1,13,-41,-127,-127,1,-27,10,-10,127,6,78,44,-104,28,33,101,-72,-38,-15,-68,127,37,-127,73,109,-6,51,-78,-52,-56,112,-114,-74,90,124,87,-46,-23,30,-103,62,-42,-127,72,106,127,90,-127,-127,-103,-99,18,127, 67,10,55,24,-22,-42,-3,57,-39,75,89,35,-2,-1,-127,29,109,-30,35,16,-117,-20,-33,-113,6,-17,127,12,127,127,10,-76,-84,-105,-37,56,-102,-13,-2,3,1,127,2,127,38,-25,-32,-67,117,29,-42,9,107,-127,-127,9,82,12,-122,15,-21,-48,49,32,127,-17,-105,-21,-93,0,-31,-70,-127,-127,-47,17,7,35,-70,-79,-114,-33,-19,127,-100,-20,39,-6,5,-78,17,11,8,117,40,-41, 
  /* [0][2][][] */ 19,-127,41,-6,33,8,48,59,-18,-38,53,-127,48,-41,29,-17,-57,22,15,38,-21,0,58,-102,26,3,34,-27,-12,57,9,39,-14,0,-66,56,109,27,27,-9,-10,41,-30,-57,10,-15,-6,-80,-47,23,127,13,19,-36,-22,16,-44,-3,-49,-23,-24,-37,40,-34,-62,36,-99,-60,-1,-41,-7,50,-2,29,23,106,-37,3,-27,-25,58,-45,-7,-44,-127,9,-36,-15,-32,16,-29,4,8,-27,-4,-65, -32,-7,127,14,127,65,-13,-17,-127,-21,-2,-108,127,-53,-95,-15,-24,52,47,-28,28,-5,71,-24,54,-59,31,2,16,97,-5,19,-73,81,-22,-15,122,3,39,-127,1,38,-127,-12,127,-3,-34,-110,-15,12,67,85,116,-114,-31,-1,-2,121,17,-43,12,-127,64,33,-8,39,-93,-26,127,-45,8,70,-106,32,-20,-21,-40,-39,-52,-81,-6,-43,-48,-119,-34,109,17,-3,90,-10,18,4,-9,-13,5,-43, 20,95,3,-25,-9,-3,0,127,10,22,127,16,33,-20,13,2,20,-11,22,46,0,22,37,-14,4,10,36,-6,-9,40,-43,-70,-41,11,-48,44,95,-23,13,-33,11,17,34,-22,-21,-4,7,-51,-26,127,31,-24,32,-45,19,3,74,-26,13,23,-58,-24,25,-34,61,25,-120,-32,-2,-31,11,61,6,-12,-32,81,-10,-3,-60,-27,-58,11,-10,-7,-41,-21,34,7,-22,25,-9,-8,0,-14,4,-50, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.009675104171037674, 0.0068013556301593781, 0.0069117401726543903, 0.0059034926816821098, 0.012108171358704567, 0.011677781119942665, 0.017532041296362877, 0.0059504322707653046, 0.013639980927109718, 0.0083888322114944458, 0.0083081470802426338, 0.0098623502999544144, 0.011330876499414444, 0.0038045642431825399, 0.0048321993090212345, 0.011883991770446301, 0.0045114019885659218, 0.0098661584779620171, 0.0049106189981102943, 0.0035198347177356482, 0.010309930890798569, 0.018628917634487152, 0.0079348422586917877, 0.0095244226977229118, 0.073899053037166595, 0.0131319435313344, 0.01018921472132206, 0.0051162689924240112, 0.011177879758179188, 0.0039381720125675201, 0.023343620821833611, 0.016933895647525787, 0.0044140918180346489, 0.0054709147661924362, 0.011766656301915646, 0.0075548156164586544, 0.0033175325952470303, 0.010807106271386147, 0.0087346816435456276, 0.005708194337785244, 0.0083236768841743469, 0.0080943061038851738, 0.010996334254741669, 0.0080525455996394157, 0.0060173803940415382, 0.0028481925837695599, 0.0099934916943311691, 0.0031527930404990911, 0.0062937028706073761, 0.0064459154382348061, 0.0057638464495539665, 0.0044015436433255672, 0.0068466872908174992, 0.0060365390963852406, 0.017601953819394112, 0.0072031249292194843, 0.010825010947883129, 0.0098560918122529984, 0.005133247934281826, 0.0052085099741816521, 0.0071532581932842731, 0.0046495902352035046, 0.0067569166421890259, 0.0069931638427078724, 0.0088735874742269516, 0.0092430589720606804, 0.010694518685340881, 0.0058926730416715145, 0.012404575943946838, 0.0095141688361763954, 0.011664093472063541, 0.0048058684915304184, 0.003877928713336587, 0.010169674642384052, 0.0089209442958235741, 0.0088449344038963318, 0.012983759865164757, 0.010637920349836349, 0.0055389357730746269, 0.0065011163242161274, 0.0062844348140060902, 0.0057241925969719887, 0.01321218628436327, 0.0064075011759996414, 0.0043543749488890171, 0.0049057342112064362, 0.0041077705100178719, 0.0057942927815020084, 0.010560768656432629, 0.0046987039968371391, 0.0044792736880481243, 0.02271541953086853, 0.0096714096143841743, 0.0078524267300963402, 0.0052074729464948177, 0.014668336138129234, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { -7355, -112, -644, -4351, 387, 5745, -919, -1356, -1253, 7513, -173, -682, -4643, 14606, 7373, -1880, 9780, 4567, -6654, 2137, 2233, 1527, -6700, -781, 140, -1853, -9044, -2321, -1175, -7481, -1338, -60, 9415, -4079, 8655, -610, -8088, -1610, -2313, 4910, -355, -4579, 973, -3301, 6624, 11680, 1668, 22315, 5240, -2929, -10106, -3653, -1116, 7424, 557, 8716, -919, 1967, 16352, 13077, 8612, 21467, 7460, -3411, -3386, -2934, -980, 10125, -483, -1083, 859, 2982, 11862, -2958, -1807, 5670, -545, -3860, 9386, 2383, 1267, 11306, -1692, 3919, 14156, 8239, -6928, -4426, -8107, -5978, 11590, 1108, -4809, 4994, -3424, -1293, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00022764952154830098, 0.00016003189375624061, 0.00016262917779386044, 0.00013890571426600218, 0.0002848981530405581, 0.00027477132971398532, 0.00041251862421631813, 0.00014001017552800477, 0.00032094074413180351, 0.00019738428818527609, 0.00019548581622075289, 0.00023205530305858701, 0.00026660886942408979, 8.9519162429496646e-05, 0.00011369880667189136, 0.00027962334570474923, 0.00010615063365548849, 0.0002321449137525633, 0.00011554398224689066, 8.2819642557296902e-05, 0.00024258661142084748, 0.00043832749361172318, 0.00018670217832550406, 0.00022410406381823123, 0.0017388012493029237, 0.00030898689874447882, 0.00023974623763933778, 0.00012038279965054244, 0.00026300892932340503, 9.266287088394165e-05, 0.00054926169104874134, 0.0003984446229878813, 0.00010386098438175395, 0.00012872740626335144, 0.00027686249813996255, 0.00017776037566363811, 7.8059594670776278e-05, 0.0002542848524171859, 0.00020552192290779203, 0.00013431045226752758, 0.00019585122936405241, 0.0001904542586999014, 0.00025873727281577885, 0.00018947166972793639, 0.00014158542035147548, 6.7016298999078572e-05, 0.00023514097847510129, 7.4183364631608129e-05, 0.00014808712876401842, 0.00015166860248427838, 0.0001356199209112674, 0.000103565733297728, 0.00016109853459056467, 0.00014203620958141983, 0.00041416363092139363, 0.00016948529810179025, 0.00025470615946687758, 0.00023190805222839117, 0.00012078230793122202, 0.00012255317415110767, 0.0001683119626250118, 0.00010940212814603001, 0.00015898628043942153, 0.00016454503929708153, 0.00020879029761999846, 0.00021748374274466187, 0.00025163573445752263, 0.0001386511285090819, 0.00029187239124439657, 0.00022386280761566013, 0.00027444926672615111, 0.00011307925888104364, 9.1245383373461664e-05, 0.00023928646987769753, 0.00020990458142478019, 0.00020811610738746822, 0.00030550023075193167, 0.00025030400138348341, 0.00013032789865974337, 0.00015296744822990149, 0.00014786905376240611, 0.00013468688121065497, 0.00031087498064152896, 0.00015076473937369883, 0.0001024558805511333, 0.00011542904394445941, 9.6653428045101464e-05, 0.00013633629714604467, 0.0002484886790625751, 0.00011055774666601792, 0.00010539467621129006, 0.00053448049584403634, 0.00022756258840672672, 0.0001847629901021719, 0.0001225287705892697, 0.00034513731952756643, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -90,56,57,-13,-74,-20,-23,-39,-87,-6,-20,-26,42,26,50,-22,8,3,84,23,4,-6,68,47,32,32,16,36,-65,-46,-50,8,-45,-25,36,29,12,24,-5,38,3,0,-41,18,-71,-23,8,76,-24,-12,-29,-1,11,13,17,-25,-127,-5,2,67,37,23,-10,7,-35,-46,-22,12,-27,-53,16,-4,-11,-2,-100,-52,-26,13,1,0,-60,75,57,-48,20,35,22,12,33,-30,-12,-32,-14,-44,-20,9, 
  /* [1][0][][] */ 37,38,6,-5,-91,-24,-12,-53,-100,27,48,-107,35,20,-69,-57,10,-16,-56,29,-27,-48,4,-6,-18,-33,11,-64,10,-74,116,-73,64,13,-8,96,52,48,-1,-1,0,37,11,-28,-27,48,-116,-17,-11,-56,-20,-40,36,-11,-50,120,-47,-11,-53,36,54,94,4,-127,-28,-5,-46,36,-18,-53,-126,23,-65,0,-43,-71,-27,-8,46,-65,-53,-14,-87,-76,43,-24,9,34,-83,11,-57,35,15,61,-33,24, 
  /* [2][0][][] */ 70,-48,15,8,11,-51,48,40,41,13,-15,7,-87,-39,0,-26,-84,-13,-41,40,22,-71,-40,25,23,-53,10,-26,7,5,-53,89,-45,91,-60,13,-1,-13,-10,-46,-78,74,51,5,-54,-3,-9,-48,-2,21,-41,-35,19,-14,1,31,127,2,36,-27,-8,11,-25,14,91,19,17,-18,26,64,-31,-21,51,23,98,49,27,-66,29,63,73,-35,-11,47,-92,36,1,53,13,4,-29,22,-42,53,-21,19, 
  /* [3][0][][] */ 17,-1,-11,-4,13,10,12,-67,-43,24,20,67,43,-20,-33,43,0,-25,28,17,21,127,14,-28,16,9,-10,13,58,-41,56,-3,-28,39,-14,-13,11,59,20,-8,-55,-40,-96,36,-33,19,30,6,19,-42,-5,-13,61,-62,-21,-50,19,86,-18,-2,-22,-22,-47,15,45,38,-26,14,-9,8,23,-68,-17,-31,49,-17,23,11,-50,-15,-14,5,-54,20,-24,-56,44,-16,10,6,19,-33,57,48,-53,44, 
  /* [4][0][][] */ 39,-24,-65,-39,40,33,-48,15,42,66,127,-20,-33,11,-13,-65,24,-19,-59,26,25,-69,46,82,-61,-10,-112,-8,-22,-107,-4,4,-36,-60,-3,34,-8,24,19,6,-53,-41,35,-3,24,19,-47,25,-36,27,-14,0,46,-37,-64,-36,118,-24,-6,-21,55,-45,35,-7,-10,20,-50,0,-73,8,-50,19,39,-58,-11,-19,19,-70,-27,4,-42,57,-85,5,-52,13,1,-65,58,15,44,28,-71,-30,22,23, 
  /* [5][0][][] */ -73,87,72,-23,22,2,67,-63,-33,57,-27,-31,39,-44,-6,-22,-37,-26,99,38,-122,6,-114,26,-38,1,76,22,6,0,-18,45,45,104,19,97,44,17,36,-10,-26,91,78,-8,-27,42,62,27,8,1,-7,43,5,-2,59,-67,20,-11,-35,-25,74,127,-73,-8,75,-12,-57,-68,-64,-14,-61,7,-36,0,-39,-71,3,-45,-14,-59,122,-16,54,-81,-72,61,45,-24,-47,13,-6,11,-9,22,39,110, 
  /* [6][0][][] */ 14,15,-46,60,-56,-82,127,89,-109,39,-25,68,-89,-81,77,61,-9,-30,27,32,5,8,-36,-44,-56,44,71,56,57,58,104,-27,0,41,64,-68,-19,20,26,89,35,16,-46,-17,-21,-62,-80,43,44,-98,17,89,49,25,-24,-54,-4,-14,21,-23,-114,40,-94,18,-8,5,7,70,44,38,36,-44,-7,4,66,11,99,14,78,-45,-32,-16,-64,79,29,-69,57,23,-31,44,28,5,-1,-1,-29,93, 
  /* [7][0][][] */ 11,110,-29,-43,10,-1,7,-77,-49,61,-25,-65,-42,4,-6,-24,-45,-12,-48,64,-21,127,46,2,1,11,70,51,69,87,97,-48,52,52,-32,12,11,-26,-25,36,-73,-23,-25,-79,-3,-58,64,-10,19,-84,-70,-9,-54,-6,35,-10,-8,-32,-77,33,-26,97,11,-15,-7,46,-62,59,-87,-19,-116,52,49,43,-46,14,-63,95,20,-53,-31,-17,67,-98,60,0,-39,-24,8,46,-80,19,59,-33,-50,0, 
  /* [8][0][][] */ 17,73,-68,56,-22,-22,-112,54,-81,-34,-13,-5,-63,63,20,80,24,-42,18,-11,17,-28,-4,-23,-40,68,-5,4,-35,-47,-70,-54,-5,-80,-53,-54,-36,8,52,-35,-30,-51,61,1,-44,-13,8,-19,-12,-5,34,52,7,-31,-73,127,4,57,-19,-18,-17,29,50,39,-21,-55,-49,-20,-52,-11,-20,-21,-33,-43,-95,12,-67,3,-65,-40,-15,-22,-20,-45,11,7,15,54,-5,91,-60,8,-118,-117,41,-38, 
  /* [9][0][][] */ -3,17,-65,19,-25,-17,58,33,9,53,-17,54,-12,-34,36,127,-7,-16,70,11,-2,7,-6,-72,6,-24,33,-38,-9,-12,6,43,-13,-17,-24,-86,46,-25,-7,-30,-22,20,29,-5,14,-4,26,16,53,80,-4,-21,-66,-71,13,2,42,36,49,-9,-19,64,-65,-35,100,1,-28,-6,-77,8,2,32,-30,90,-4,-5,-53,-20,-42,-32,68,-54,39,-15,-3,-8,-1,-41,-39,-1,22,15,25,24,-57,8, 
  /* [10][0][][] */ 38,3,-48,8,-58,-35,94,27,-4,-29,-29,-15,-97,-30,17,14,-87,-53,37,16,57,21,13,15,-36,76,30,9,-12,-66,-33,15,50,-38,52,-7,62,-75,87,126,47,-53,-17,15,-15,-98,-9,55,23,68,-29,-40,-7,34,-11,100,-11,-66,55,59,0,73,-47,-26,-36,-87,27,44,39,-35,17,53,90,0,13,-127,41,-61,56,-5,-55,60,10,37,-9,-15,26,61,-68,-11,41,56,62,62,-38,1, 
  /* [11][0][][] */ -26,-68,27,-80,27,1,-21,-3,111,-40,-16,19,-60,-5,-18,19,-72,10,38,14,-45,-7,-79,-52,-6,15,-83,31,46,-106,56,-23,14,-12,-48,-63,-79,25,-123,-23,-64,106,-30,20,11,-1,8,-85,-1,-47,-87,-66,29,-3,50,-72,44,-50,-8,-88,-44,-67,-29,-127,57,-96,43,36,116,31,81,-55,-36,-13,119,-12,68,35,-10,77,33,-47,-7,86,66,15,2,14,-89,-55,-18,42,55,84,56,73, 
  /* [12][0][][] */ 15,-1,13,-34,15,83,12,-18,21,48,-13,60,20,34,25,8,-63,52,22,69,127,18,78,-53,18,23,-31,-41,8,94,38,19,7,18,24,-57,28,13,-46,-24,41,-17,39,51,-46,20,-12,8,-71,-4,26,38,8,-9,15,-14,-102,4,22,49,5,-82,5,-73,-28,79,1,-4,5,-56,72,18,18,-8,-35,22,8,80,-27,25,-48,51,82,25,31,54,-17,-75,87,-9,-87,28,84,-2,4,-97, 
  /* [13][0][][] */ -27,54,11,-43,-51,-4,34,-21,-18,-19,-36,-62,91,-99,-19,-71,-23,-33,-16,14,-69,8,29,91,-31,3,113,26,-15,18,60,53,-3,21,-78,127,-31,-30,27,-26,112,-2,22,50,-28,-86,53,13,88,-16,-22,39,38,11,-14,61,-13,-65,-23,8,47,56,-21,-62,-57,54,-18,39,-36,-56,-50,6,-46,11,-77,-93,-72,31,67,78,-29,71,41,-67,67,45,69,-2,-4,-26,-22,-7,-30,22,-22,-20, 
  /* [14][0][][] */ 11,21,-61,-32,109,88,-106,-30,58,-28,77,18,18,-36,-20,-50,-70,35,31,127,11,-4,20,25,-18,27,-41,72,11,-4,-15,12,49,18,-30,13,2,67,54,-15,61,-11,19,16,-9,-49,64,-26,35,-33,-7,-8,34,26,-14,24,54,71,-71,-2,-32,-79,-51,-78,23,-51,-32,19,-54,64,-3,25,16,-19,4,-43,46,16,-62,-13,49,11,12,0,-42,42,-33,-6,-15,38,43,42,18,-13,-53,-52, 
  /* [15][0][][] */ -60,-34,21,-49,0,-24,-36,-59,-42,8,18,35,15,2,52,39,-60,-31,6,-52,4,-21,-1,-71,12,-7,32,-39,-24,-67,-47,26,-16,31,96,-78,-17,-33,24,7,-18,-5,-2,-9,18,17,43,92,-44,8,11,-41,-28,20,-21,-26,-127,-55,53,-9,-12,19,-71,5,-103,-25,-14,25,44,-64,78,8,28,-24,-51,-40,10,24,27,-3,-52,73,17,3,14,-33,-78,16,-13,-29,-44,31,55,-23,-35,30, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0030625185463577509, 0.0022837626747786999, 0.0032818738836795092, 0.0023746280930936337, 0.0024627526290714741, 0.0020977365784347057, 0.0023553890641778708, 0.0025486510712653399, 0.0021520282607525587, 0.0026059877127408981, 0.0018533783731982112, 0.002301432192325592, 0.0028306026943027973, 0.0031385524198412895, 0.0031745985615998507, 0.0031946876551955938, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 2273, 12392, 2621, 762, 9355, -94, -11395, 5462, 15823, 248, -10455, 15833, -15128, -1396, -1937, 7761, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 7.205925794551149e-05, 5.3735591791337356e-05, 7.7220560342539102e-05, 5.5873602832434699e-05, 5.7947123423218727e-05, 4.9358510295860469e-05, 5.5420921853510663e-05, 5.9968260757159442e-05, 5.0635961088119075e-05, 6.1317361542023718e-05, 4.3608903069980443e-05, 5.4151347285369411e-05, 6.6602420702110976e-05, 7.3848292231559753e-05, 7.4696436058729887e-05, 7.5169125921092927e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -33,87,-107,26,37,-49,127,62,-74,-19,56,-82,91,121,-85,43, 
  /* [1][0][][] */ -38,19,-35,-39,6,37,4,-127,40,-25,-33,-46,-27,-55,-45,-10, 
  /* [2][0][][] */ -19,-32,5,70,17,20,-89,127,-19,-32,43,-66,-3,-70,-39,89, 
  /* [3][0][][] */ 66,-79,48,-12,28,-33,-18,127,-29,41,57,39,4,36,-7,21, 
  /* [4][0][][] */ -58,-21,-39,37,-85,-13,-11,-123,-22,-25,15,-12,62,35,102,127, 
  /* [5][0][][] */ 127,25,-3,-32,-57,34,4,71,23,7,66,104,93,31,-71,-11, 
  /* [6][0][][] */ -2,-50,-91,-63,-118,-16,26,-56,-64,-84,-17,21,127,33,113,16, 
  /* [7][0][][] */ -89,18,-49,-101,-1,-80,-68,0,-123,46,-62,-58,-127,-57,-1,113, 
  /* [8][0][][] */ 70,59,91,17,48,37,112,-4,115,-86,89,-5,-127,-47,-107,2, 
  /* [9][0][][] */ -19,47,13,-31,-32,14,34,21,-32,34,-22,-6,45,127,8,35, 
  /* [10][0][][] */ 41,46,-36,20,-1,-55,42,-52,-61,-41,-54,-81,-126,-127,-9,106, 
  /* [11][0][][] */ 51,19,80,26,-3,-17,-4,127,-85,41,-48,-13,-21,10,83,112, 
  /* [12][0][][] */ -98,1,55,-6,76,34,114,94,-9,89,28,-67,-99,127,-104,106, 
  /* [13][0][][] */ 44,28,-4,34,116,91,127,36,-21,58,-37,-62,23,125,-126,-32, 
  /* [14][0][][] */ -123,127,26,-23,20,6,32,6,-11,45,94,7,-120,12,-32,22, 
  /* [15][0][][] */ 0,-36,-127,-38,99,-34,-108,-41,-13,-20,-31,-88,-18,-102,-59,41, 
  /* [16][0][][] */ 114,-32,4,-39,68,-59,57,-54,-32,2,127,76,23,-23,-77,40, 
  /* [17][0][][] */ 15,28,-1,-105,26,-66,71,-127,30,-11,-66,64,13,41,-9,26, 
  /* [18][0][][] */ 18,103,9,-42,51,-48,-42,-24,-24,127,-30,-15,-46,48,-20,-42, 
  /* [19][0][][] */ -106,-72,127,-27,51,-75,24,-44,40,67,46,83,22,23,105,-59, 
  /* [20][0][][] */ -2,78,63,3,23,15,5,-27,82,-2,71,-82,-127,-16,-60,-20, 
  /* [21][0][][] */ -50,37,19,25,65,45,56,82,-127,54,-63,10,-21,29,-47,-38, 
  /* [22][0][][] */ 14,-90,27,4,20,-127,104,-6,10,-50,-28,-54,45,-85,-70,-33, 
  /* [23][0][][] */ -100,-101,42,57,42,-43,31,-49,12,-52,50,28,28,51,67,127, 
  /* [24][0][][] */ -30,-8,61,80,88,9,-78,-127,76,21,-53,-20,-7,-16,-48,-38, 
  /* [25][0][][] */ -30,44,44,-76,-8,-7,-9,-61,-9,84,-59,3,25,127,5,-13, 
  /* [26][0][][] */ -48,72,-9,15,25,-72,3,-13,28,1,2,48,5,9,-93,127, 
  /* [27][0][][] */ -9,-127,-72,11,-74,124,1,-41,22,-46,65,-55,37,-38,-112,-12, 
  /* [28][0][][] */ -46,-6,34,61,42,2,-25,-127,-106,30,98,-10,68,1,-47,-16, 
  /* [29][0][][] */ -127,87,-36,-43,-9,10,-101,-82,-51,-44,10,8,16,-68,-121,67, 
  /* [30][0][][] */ 25,60,-41,57,-81,-93,-49,-29,-39,-22,19,-94,127,18,-13,88, 
  /* [31][0][][] */ 127,46,-113,7,-67,19,107,80,-51,-19,51,21,84,36,-5,39, 
  /* [32][0][][] */ -42,-29,127,-5,-1,47,49,-22,-11,18,-15,38,-7,40,46,17, 
  /* [33][0][][] */ 40,38,-48,-70,3,70,60,58,31,-6,16,-40,73,127,-53,33, 
  /* [34][0][][] */ -66,-9,71,26,21,-38,107,22,-127,23,32,-56,56,73,-63,-14, 
  /* [35][0][][] */ 26,47,-62,-7,-65,127,-27,-25,9,100,27,53,-68,61,1,36, 
  /* [36][0][][] */ -5,-56,127,-33,-47,29,-53,1,30,41,-65,50,-2,-63,-26,31, 
  /* [37][0][][] */ 77,-5,49,-43,127,-86,-35,45,-61,77,-66,-2,-83,-66,89,-3, 
  /* [38][0][][] */ 82,70,39,-77,11,-25,-127,85,-66,85,-125,-79,-90,-90,-82,39, 
  /* [39][0][][] */ -89,29,-59,-5,-100,-69,96,17,-127,-39,31,64,53,15,8,52, 
  /* [40][0][][] */ 127,43,-25,-66,-81,64,32,-3,-38,-13,-30,-109,12,67,23,54, 
  /* [41][0][][] */ 63,-87,-82,-59,18,-21,-51,1,58,-42,-1,-38,127,-88,26,-16, 
  /* [42][0][][] */ 1,-66,-46,127,-13,-88,-116,26,33,11,-28,51,-93,69,-35,-3, 
  /* [43][0][][] */ -92,-34,-25,-127,-44,2,-22,72,57,-126,-49,50,-38,-66,-31,70, 
  /* [44][0][][] */ -13,55,55,-41,0,-5,3,126,127,-61,51,79,78,46,-10,-16, 
  /* [45][0][][] */ -3,50,-57,52,127,-80,-29,-48,74,-23,48,-31,-50,-29,-60,51, 
  /* [46][0][][] */ -23,-45,7,-13,76,6,31,17,7,92,-7,-127,23,65,-88,43, 
  /* [47][0][][] */ 77,-34,-44,-3,66,-4,-21,-69,-7,127,-24,19,-2,-84,-105,22, 
  /* [48][0][][] */ 13,30,2,-115,-8,-27,102,-127,19,6,-34,42,46,65,24,16, 
  /* [49][0][][] */ -30,127,-27,7,51,-53,4,69,17,27,-7,-52,-45,19,79,-68, 
  /* [50][0][][] */ 4,34,-28,-13,-127,-11,-65,-67,53,65,38,42,-42,-55,-7,43, 
  /* [51][0][][] */ 127,-13,-42,-14,-47,66,-85,-40,26,-4,-44,59,-27,-45,16,25, 
  /* [52][0][][] */ -51,-107,41,37,-51,-127,-83,-95,-49,-50,42,-68,18,-72,-11,85, 
  /* [53][0][][] */ 39,89,32,-126,-9,118,117,12,-21,-62,9,-65,109,-127,-20,91, 
  /* [54][0][][] */ 7,127,-1,-18,11,-110,-93,80,-2,-21,-65,116,96,81,14,78, 
  /* [55][0][][] */ -83,-16,17,17,29,-72,117,85,-60,-37,18,20,127,5,-14,18, 
  /* [56][0][][] */ 127,44,34,14,-31,81,-57,-67,3,49,-87,16,-64,71,-20,14, 
  /* [57][0][][] */ -103,-57,8,-56,-39,-127,71,-94,-107,-2,63,84,-6,10,-29,-2, 
  /* [58][0][][] */ 50,-39,63,23,22,-42,-29,23,39,-2,-127,-36,7,-24,-29,28, 
  /* [59][0][][] */ 72,35,-101,78,8,37,50,-24,-31,-7,3,-92,-127,-46,28,75, 
  /* [60][0][][] */ 2,24,-23,18,3,-7,-38,13,-5,-29,38,57,-62,-127,-45,-18, 
  /* [61][0][][] */ -36,41,57,-75,-67,60,2,127,0,-83,71,59,49,-9,-17,124, 
  /* [62][0][][] */ 56,60,5,-127,-2,-9,-6,-27,13,29,-44,49,2,-37,-67,-80, 
  /* [63][0][][] */ 34,17,-15,2,-99,-74,-126,31,-116,49,-101,-42,125,29,127,-55, 
  /* [64][0][][] */ 9,24,-18,23,-71,-83,-17,-118,53,120,32,37,-3,-105,-65,127, 
  /* [65][0][][] */ -14,30,-24,-4,-64,108,6,0,68,-86,95,-88,51,89,-127,35, 
  /* [66][0][][] */ -100,99,-57,-54,50,-10,-114,-37,-62,116,58,-16,-127,-29,56,27, 
  /* [67][0][][] */ -21,-20,-72,-127,79,40,-16,-20,1,11,34,1,-11,-4,-13,25, 
  /* [68][0][][] */ 59,30,-25,-47,-46,19,14,16,-27,60,94,-6,-36,-56,-127,2, 
  /* [69][0][][] */ 64,-62,63,-34,45,-85,-47,127,-2,75,62,56,-43,80,-13,-26, 
  /* [70][0][][] */ 43,8,122,31,118,-31,127,-16,-3,28,-56,51,-58,51,-63,47, 
  /* [71][0][][] */ 19,42,99,-60,-127,-65,4,25,-6,-8,7,-111,-80,9,19,21, 
  /* [72][0][][] */ -75,-112,3,-127,57,-33,23,22,-72,-4,-104,9,65,91,-57,127, 
  /* [73][0][][] */ 19,-3,47,-18,127,-54,-62,19,-3,98,-76,-1,-104,-57,91,-26, 
  /* [74][0][][] */ -111,18,-93,-40,74,-21,-52,42,-61,25,-127,-49,-47,-30,-15,54, 
  /* [75][0][][] */ 76,-22,68,-74,42,-39,-127,-24,17,-86,60,7,-8,-29,-25,-25, 
  /* [76][0][][] */ -33,-40,-30,95,5,44,116,-127,57,-86,68,79,34,-55,-38,32, 
  /* [77][0][][] */ -46,-12,81,-7,15,-18,-4,-121,2,16,18,127,57,45,37,3, 
  /* [78][0][][] */ -25,24,35,-15,-6,-34,26,-6,46,-7,8,-127,-117,-35,-116,-70, 
  /* [79][0][][] */ -34,-54,-11,57,127,64,-35,24,-29,108,-46,46,-16,-16,-15,-40, 
  /* [80][0][][] */ -28,-117,68,75,-3,-55,-127,96,37,-10,16,10,-91,-46,-42,44, 
  /* [81][0][][] */ 111,103,-43,89,-6,47,20,127,53,5,59,17,72,34,16,12, 
  /* [82][0][][] */ -69,22,-4,-41,67,-127,-102,-72,20,66,-64,-30,-37,63,-89,-8, 
  /* [83][0][][] */ 127,-8,52,-37,-41,-3,-106,-28,8,-89,49,-36,-23,-7,12,-7, 
  /* [84][0][][] */ -1,-33,-50,19,119,-14,0,51,-80,51,-127,2,22,-41,-36,-6, 
  /* [85][0][][] */ 23,66,48,-40,84,14,10,-83,127,-50,44,-47,24,-65,-1,-12, 
  /* [86][0][][] */ 114,-59,127,37,11,-78,95,24,-82,-77,-91,-35,54,3,-88,24, 
  /* [87][0][][] */ 9,22,33,-70,91,-17,-62,29,52,-28,66,-52,-104,-127,10,11, 
  /* [88][0][][] */ -101,-52,35,26,-8,78,-10,-69,11,1,-89,-127,-36,-44,-16,17, 
  /* [89][0][][] */ -44,45,16,-64,1,-22,-127,60,23,81,-93,16,20,-64,5,0, 
  /* [90][0][][] */ -26,-15,-41,-69,127,2,-38,47,22,61,19,-6,53,14,-57,-4, 
  /* [91][0][][] */ 1,-22,-24,67,-66,25,3,79,-11,-37,3,-70,-6,87,14,127, 
  /* [92][0][][] */ -12,46,28,-18,-20,64,-81,37,-45,0,87,7,-29,127,32,16, 
  /* [93][0][][] */ 11,47,-57,-56,59,80,-82,-32,58,50,88,16,-127,25,-78,107, 
  /* [94][0][][] */ 47,70,81,14,-127,-14,-2,-20,25,-36,40,-21,-60,-17,11,-18, 
  /* [95][0][][] */ 12,57,-20,23,87,-7,-37,76,-18,14,-127,60,29,35,83,43, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0015499747823923826, 0.0021198131144046783, 0.0020848517306149006, 0.0012844073353335261, 0.001634549698792398, 0.0019682073034346104, 0.0013472681166604161, 0.0012211495777592063, 0.0013106103288009763, 0.0024451459757983685, 0.0013491731369867921, 0.0013295423705130816, 0.0010901249479502439, 0.0009879071731120348, 0.0016122795641422272, 0.001128978212364018, 0.0021445492748171091, 0.0022329839412122965, 0.0017222831957042217, 0.0013017075834795833, 0.0015945836203172803, 0.0015353799099102616, 0.0018007076578214765, 0.001982236048206687, 0.0020866061095148325, 0.0016436319565400481, 0.0016645408468320966, 0.0014391099102795124, 0.0012622327776625752, 0.0021468030754476786, 0.0017933250637724996, 0.0018639714689925313, 0.0023589900229126215, 0.0012315212516114116, 0.00099932285957038403, 0.0016087532276287675, 0.0025224017444998026, 0.00098990369588136673, 0.00089886679779738188, 0.0011941330740228295, 0.0021652767900377512, 0.0020193210802972317, 0.002467975951731205, 0.001269657164812088, 0.0017147782491520047, 0.0016236257506534457, 0.0017067017033696175, 0.0015633482253178954, 0.0011630274821072817, 0.0021350267343223095, 0.0020907379221171141, 0.0016024371143430471, 0.0013165056006982923, 0.0018282302189618349, 0.0015732343308627605, 0.0017785162199288607, 0.0017426417907699943, 0.0014675960410386324, 0.0023532407358288765, 0.0021061757579445839, 0.0021504170726984739, 0.0018992265686392784, 0.0024326138664036989, 0.0006624343222938478, 0.0013341235462576151, 0.0010619207751005888, 0.0013312813825905323, 0.0015530885430052876, 0.0017953863134607673, 0.0020594268571585417, 0.0014411836164072156, 0.0010997519129887223, 0.0012238617055118084, 0.0014316540909931064, 0.00084811769193038344, 0.00092429586220532656, 0.0013973407912999392, 0.0017045417334884405, 0.0014334688894450665, 0.0014246761566027999, 0.00082840223331004381, 0.0017687194049358368, 0.0015479478752240539, 0.0018277069320902228, 0.0010347390780225396, 0.0018227926921099424, 0.0017503412673249841, 0.0010778344003483653, 0.0018509274814277887, 0.0019594777841120958, 0.00081134436186403036, 0.0028400877490639687, 0.0021904513705521822, 0.0011309252586215734, 0.0015819804975762963, 0.0014451544266194105, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1087, -297, 2249, 4355, 2833, -1763, 3306, -802, 445, -268, 2879, -2739, 2151, 4338, 1149, 2482, -513, -794, -1278, 3608, 2226, -480, 1369, -534, -704, 2368, 1306, 1834, 4432, 1429, 1712, 921, 706, 2399, 4378, 1762, -205, 3141, 3365, -2942, -147, 777, -77, 1430, -1244, -467, -1425, 923, -4697, 256, 845, -1829, 4008, -558, 1512, 913, 284, 1353, -627, -1470, -168, 695, -28, 6072, 3698, 2928, 2087, 2642, 2775, -399, 2377, 4234, 3006, -1051, 5925, 6485, 699, -2596, 905, 2091, 5976, 1151, 566, -1166, 631, 569, 1136, -2926, 3418, 603, 7321, 597, -15, -2449, -87, 2028, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00021689159621018916, 0.00029663040186278522, 0.00029173816437833011, 0.00017973012290894985, 0.0002287263487232849, 0.00027541583403944969, 0.00018852637731470168, 0.00017087830929085612, 0.00018339676898904145, 0.00034215499181300402, 0.00018879295384977013, 0.00018604597426019609, 0.00015254372556228191, 0.00013824015331920236, 0.00022561004152521491, 0.00015798055392224342, 0.00030009177862666547, 0.00031246666912920773, 0.00024100310110952705, 0.00018215097952634096, 0.00022313381487037987, 0.00021484929311554879, 0.00025197723880410194, 0.00027737891650758684, 0.00029198365518823266, 0.00022999725479166955, 0.00023292309197131544, 0.00020137800311204046, 0.0001766271743690595, 0.0003004071768373251, 0.00025094416923820972, 0.00026082986732944846, 0.00033009899198077619, 0.00017232964455615729, 0.00013983757526148111, 0.00022511660063173622, 0.00035296555142849684, 0.00013851953553967178, 0.00012578052701428533, 0.00016709782357793301, 0.0003029922372661531, 0.0002825683041010052, 0.00034534963197074831, 0.00017766609380487353, 0.00023995291849132627, 0.0002271977427881211, 0.00023882275854703039, 0.00021876297250855714, 0.00016274515655823052, 0.00029875928885303438, 0.00029256183188408613, 0.0002242327609565109, 0.00018422170251142234, 0.00025582851958461106, 0.00022014635032974184, 0.00024887191830202937, 0.00024385192955378443, 0.00020536413649097085, 0.0003292944747954607, 0.00029472209280356765, 0.0003009128849953413, 0.00026576319942250848, 0.00034040134050883353, 9.2695983767043799e-05, 0.00018668701522983611, 0.00014859705697745085, 0.00018628931138664484, 0.00021732730965595692, 0.00025123258819803596, 0.00028818039572797716, 0.00020166818285360932, 0.00015389085456263274, 0.00017125782324001193, 0.0002003347035497427, 0.0001186790905194357, 0.00012933887774124742, 0.00019553315360099077, 0.00023852050071582198, 0.00020058864902239293, 0.00019935825548600405, 0.00011592025839490816, 0.00024750104057602584, 0.00021660796483047307, 0.00025575529434718192, 0.00014479344827122986, 0.00025506762904115021, 0.00024492933880537748, 0.00015082387835718691, 0.00025900459149852395, 0.00027419428806751966, 0.00011353330773999915, 0.00039742010994814336, 0.00030651496490463614, 0.00015825300943106413, 0.0002213702246081084, 0.00020222383318468928, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ -10,21,-18,-104,-87,-18,-30,40,-39,-52,-119,-96,-111,49,-70,24,4,48,-2,-27,-62,-106,-59,-6,45,-109,-25,57,18,-93,32,-26,-86,45,-3,-88,-48,-16,-100,-41,-106,-81,54,-84,25,-46,-94,49,-109,52,-96,-13,-48,40,-32,17,-84,-96,-27,2,-38,44,0,-124,31,-122,-107,13,14,-98,-50,69,-76,8,-64,47,-69,-63,-52,-53,-127,9,29,6,-67,-94,-80,-58,-7,6,-21,22,-100,-105,-65,8, 
  /* [1][0][][] */ 18,20,63,35,3,-38,-7,90,108,15,-4,29,-27,-7,14,37,2,-2,49,25,91,48,8,2,61,4,13,-22,31,51,-14,-29,-7,-26,-7,-18,58,23,50,5,-10,36,25,78,35,21,-2,74,16,-10,9,-16,2,-31,-1,-15,17,18,36,5,43,-16,24,-6,49,-9,66,67,62,70,46,58,25,39,88,46,31,7,127,30,27,29,26,16,36,86,-25,60,52,19,84,-11,-19,45,16,40, 
  /* [2][0][][] */ 20,-30,-86,-95,-27,30,69,18,-39,-33,-29,-46,71,99,-32,-81,-92,37,-34,-33,-88,-29,-20,-3,-75,81,-55,-20,-18,-6,-66,54,56,-33,30,33,-70,19,-70,32,74,-50,102,94,-62,11,93,-27,-39,-31,31,115,-92,-74,-6,-81,-5,17,62,127,120,57,-40,78,104,102,-67,-40,17,16,114,-6,17,27,-4,-41,88,-19,-127,-72,-64,117,-43,60,-28,-30,28,52,35,-22,62,106,-9,5,77,36, 
  /* [3][0][][] */ -61,43,65,-48,63,49,63,82,60,13,-1,6,36,-36,54,50,-127,15,-22,96,-60,7,-56,30,55,23,-55,-12,-3,6,-26,53,-79,0,20,-81,-24,-4,-10,15,-81,-2,-80,15,17,-87,-92,-31,-80,77,-47,-86,46,4,99,14,-85,-68,34,-87,-71,46,-75,22,-16,40,-35,-43,-48,-44,-9,-18,61,102,-29,-48,-99,-42,96,-34,37,68,-2,-50,11,-41,30,-32,-51,24,34,70,-55,-48,-2,69, 
  /* [4][0][][] */ -89,-8,63,-9,12,-20,-52,-9,55,21,-112,-44,-63,71,-5,-56,30,-6,-32,-68,-25,47,-127,-66,-17,-124,36,-2,-27,-112,55,-8,-101,4,-48,-68,57,-21,-111,-113,45,42,-118,-96,18,43,-39,-45,49,5,61,59,29,-127,-30,30,-116,-55,40,-77,42,-41,-37,33,-77,-12,-84,-73,-11,71,-4,-40,-50,-21,43,-80,-54,47,-53,34,-5,-101,55,-26,46,123,-24,-35,-66,23,86,14,50,33,-112,-71, 
  /* [5][0][][] */ -118,58,-79,-68,-17,-55,-72,21,-10,-94,14,2,-101,13,57,58,-127,66,19,-36,102,-7,-73,51,-93,19,-59,-93,-64,0,14,-34,-99,21,22,70,58,-97,-82,-68,72,-41,-45,-82,52,66,-21,-37,-12,45,102,64,-103,-72,2,-70,120,-73,-83,23,19,19,-21,19,26,-86,7,4,44,-73,7,-24,-119,18,-14,-116,-86,-3,-2,-16,26,67,-105,8,7,-55,-112,-40,16,-37,-64,59,3,116,27,37, 
  /* [6][0][][] */ 47,-51,-28,-114,-127,-66,3,-111,32,23,-11,62,6,-98,-52,61,-94,40,-1,41,-120,54,40,-10,-36,-8,-120,-122,-74,-107,-38,0,-116,-27,22,27,-121,-71,-25,12,-116,-8,33,-33,-125,33,-113,-55,15,40,-41,11,-97,-119,-92,-108,-83,-43,-36,31,13,-76,39,-31,65,32,-50,2,-38,-101,-72,-49,17,-68,43,53,-69,8,-72,-95,-11,-56,-60,-85,27,-35,-43,66,-41,-65,-109,-65,-106,-26,56,-59, 
  /* [7][0][][] */ 16,70,37,-12,33,-24,-13,48,47,-42,39,-17,-15,50,66,95,28,-3,27,49,100,-24,-8,-37,78,-13,46,25,-24,62,-5,-6,-50,-10,24,-9,87,57,73,-54,-34,8,-1,102,10,38,-27,54,4,16,5,31,3,-1,64,-2,22,-36,28,-59,75,-34,45,-10,-4,-22,33,30,55,25,-11,29,-19,66,72,95,-36,-13,56,61,30,12,55,23,13,69,1,32,101,91,127,-45,9,13,34,1, 
  /* [8][0][][] */ -27,-15,-82,-3,34,12,-1,-100,-65,-41,71,-38,-12,-36,-109,-21,28,62,8,1,-48,15,55,-30,-58,-38,35,-38,-18,-33,-36,10,-19,2,-42,62,-75,-49,-61,-28,7,16,4,-16,-22,-57,-11,12,67,33,4,9,57,15,2,-60,22,6,13,26,-25,-10,-44,50,8,-12,-77,-28,-37,25,-49,38,7,21,-2,54,47,74,-37,-72,16,46,-73,57,15,-127,-5,-27,13,-38,-111,32,-39,-28,67,-47, 
  /* [9][0][][] */ -2,-1,26,55,29,57,66,40,-50,35,65,63,85,44,-3,2,-5,-34,-19,-82,-82,48,5,-15,-89,-34,-23,46,31,-57,-4,52,-58,-25,62,-7,-26,-13,-41,-37,82,63,-8,35,52,58,39,-26,-42,-7,-52,-19,-61,16,36,55,13,-43,11,28,21,-30,24,60,-69,67,57,65,76,-51,-73,16,41,36,60,-73,80,-127,8,-58,-62,-9,35,-54,67,-63,-55,34,-87,-16,5,23,-35,39,8,38, 
  /* [10][0][][] */ -106,6,-94,-108,-70,26,-127,-97,116,-109,32,19,-40,-16,29,-28,48,-19,-83,5,18,-68,-58,27,94,45,-47,-57,-111,-79,-47,-116,7,-11,48,-123,60,-76,10,53,24,-19,2,13,-46,-4,-34,-27,-90,51,40,46,43,-104,39,5,-23,-41,27,-44,31,10,62,3,-61,41,-24,6,-27,-33,42,-4,-104,-99,-5,22,18,50,37,-16,-34,-12,-6,55,-22,35,-99,-3,-7,91,-55,29,1,30,32,-21, 
  /* [11][0][][] */ 36,21,-58,-5,77,9,0,-74,-75,35,47,-10,-10,-48,8,-70,-89,25,-61,-54,-4,-79,13,-75,-59,74,21,57,8,11,18,42,31,40,-116,-15,-9,120,-53,-69,69,-47,127,-88,25,1,-83,-36,7,58,-1,89,32,-89,-2,-109,18,25,-70,56,-41,-15,109,-31,36,-23,35,8,57,76,-17,14,-81,17,-9,-9,-30,44,-69,-65,-24,12,-39,102,-18,-71,-34,-38,-13,73,0,-46,83,42,93,49, 
  /* [12][0][][] */ -15,-57,-20,59,4,-26,-27,-29,-29,10,-38,46,-34,-47,-29,40,3,-63,49,38,-89,-14,41,23,-44,46,-35,-35,52,-81,62,39,4,-13,-2,-64,-53,-54,41,30,33,56,5,-46,47,-42,-26,35,-105,76,-127,-38,-22,-50,66,46,-23,-62,-52,-61,17,-11,8,-1,-63,-5,13,-41,-95,-72,-15,-43,-57,-22,-8,-37,-77,-51,7,-57,-1,54,61,-51,48,-77,-4,-24,-107,-113,-48,15,-44,-56,-122,61, 
  /* [13][0][][] */ 8,5,20,-40,27,-8,-1,-36,84,-69,3,-2,-17,2,2,16,18,8,-10,19,78,-24,-16,-41,44,-56,-13,-44,-3,-51,-26,-23,-21,-59,-3,-11,14,-44,16,4,-6,-28,31,22,4,-17,12,13,-46,19,-19,56,-24,-49,-11,21,51,-34,18,-37,-54,-17,20,-36,-47,-2,-27,-55,-48,-37,-49,29,-29,-14,27,-9,-25,23,-18,-39,18,3,-16,127,25,-30,-53,16,-41,7,1,-27,58,30,17,-10, 
  /* [14][0][][] */ -11,-31,52,42,35,-25,21,-20,-68,46,-2,-15,6,76,-49,17,-56,-17,-10,-114,-59,20,-40,-41,-19,-9,28,11,38,-26,59,-4,-27,70,59,23,-9,22,-115,-59,86,68,62,31,45,-14,15,-59,-78,14,-1,-16,5,-58,84,-61,32,-63,-29,-34,-9,-53,4,16,-9,45,-73,7,-70,-17,30,-33,-51,-45,-10,5,-64,-65,-7,-36,61,2,45,41,-24,-35,-26,12,-11,-80,-53,-6,14,-127,-42,-30, 
  /* [15][0][][] */ 13,11,20,-23,-65,62,-6,14,-91,-40,35,2,-2,-48,-17,-7,-18,49,-69,-34,-41,-67,-35,-6,-37,-36,60,41,-64,-35,-68,9,25,55,-54,-42,-7,3,-37,-46,-51,66,49,-6,67,40,-50,-94,18,-36,-37,-66,-50,-9,43,14,5,-19,46,-31,-75,-32,-74,-38,-31,5,-25,-26,-34,-35,-63,-19,46,7,13,21,-10,-14,-60,-32,-11,-24,-61,-50,-12,-21,45,-18,-17,-127,-75,57,-28,-46,35,-25, 
  /* [16][0][][] */ 11,33,-69,51,66,-30,70,80,-73,29,64,-24,-12,48,-49,2,34,65,-13,1,-113,-17,-42,26,0,-38,-26,28,-25,73,78,33,-47,-14,22,-7,13,16,-52,55,18,24,36,-12,-34,10,-36,-20,4,36,54,12,-5,-56,37,24,7,72,-1,-20,42,0,-3,48,10,34,57,-13,8,-23,34,23,59,-10,46,-62,64,-22,-40,-40,-10,12,-21,-86,73,-25,7,-44,6,-127,11,-47,27,12,29,-104, 
  /* [17][0][][] */ -33,68,-67,-52,-27,6,-45,83,-32,-55,69,3,-22,31,33,-22,22,53,-6,57,-47,-33,-31,0,-127,-30,-7,-53,-45,44,25,-76,13,-38,-21,-6,42,-108,-1,37,-51,52,-66,-43,66,23,-73,-44,30,-89,-19,-117,-38,15,15,9,-75,55,-34,-36,83,63,38,36,-38,14,-45,43,-52,-42,-32,-11,-23,-87,14,25,-64,-47,82,-55,-34,-32,-1,-79,50,33,-50,82,-34,4,-40,39,-94,-92,-9,-91, 
  /* [18][0][][] */ 24,-93,-106,-42,1,-18,-127,-95,13,-10,-92,-92,-34,46,-10,0,-10,38,-94,-55,-37,19,-11,-6,24,-58,1,-92,-48,-111,-20,-117,-44,30,50,-38,49,-48,-70,-91,-110,-20,51,-71,-45,5,37,-65,41,-34,-29,-41,-79,-26,-70,-10,75,-13,-126,18,-96,-49,28,35,-47,-9,-95,-105,54,-53,-59,34,-106,59,-28,108,1,77,-30,-39,-78,-72,-93,104,-20,-70,38,-13,27,37,-44,49,-100,19,26,-33, 
  /* [19][0][][] */ 35,67,-114,28,97,31,-45,29,21,-41,12,-30,65,32,118,-11,40,-49,-11,120,-126,-62,45,115,2,-19,47,-12,85,51,75,-92,51,-25,-40,35,-52,-36,-29,38,8,14,60,54,-16,57,-75,99,126,-4,53,-67,70,-48,47,97,1,31,-48,-35,-6,50,83,-30,90,-7,-34,64,83,19,-73,31,21,30,35,62,21,127,-40,106,-76,-83,62,-82,36,31,59,-37,-90,-50,-85,14,-42,-64,67,-115, 
  /* [20][0][][] */ -40,-100,-55,20,43,-15,34,14,-28,-80,-16,-32,-56,-96,-26,-99,-46,-76,59,14,40,-114,54,-56,-49,61,-91,-20,-23,-84,-72,-28,3,47,43,-81,62,-6,-105,-14,49,-122,-87,-54,3,-12,-65,-52,35,-38,66,-99,-28,46,-13,-104,-77,-127,35,-23,-51,39,41,33,-5,47,2,-98,-1,43,-37,-2,-112,-98,-56,70,-41,-87,15,-80,-23,48,62,-40,6,1,-86,-114,82,66,-108,-101,20,-72,21,43, 
  /* [21][0][][] */ 66,85,74,-41,-10,-8,-40,-14,-71,70,35,-33,-13,-28,-40,-44,-14,-7,-30,-127,-42,37,57,-34,33,28,51,4,-41,-45,77,23,-52,37,51,78,-75,-77,-69,16,19,35,-31,36,-19,76,-46,19,17,-50,9,-19,42,-25,-49,-27,0,-35,61,77,30,-12,2,45,-15,47,-41,21,8,-41,5,9,-13,-49,-20,1,-43,-39,51,19,-16,81,-70,-6,-43,-80,18,36,-69,-46,-64,67,4,-24,56,-30, 
  /* [22][0][][] */ -31,-68,26,-34,-77,-69,53,33,46,-33,-30,0,-55,3,-48,-68,-76,-20,-90,34,72,45,-18,33,-84,4,-67,27,-54,-2,-54,-68,-82,62,4,2,-4,-89,-42,-55,-37,-7,-88,32,44,-39,54,-56,-67,-46,-81,41,-66,60,-27,19,40,54,-84,41,13,-23,-6,1,46,-84,-77,-25,34,44,-96,-47,-6,30,-37,-35,-79,-87,54,-48,50,-67,-85,-58,24,99,-32,127,-1,113,61,0,-110,40,42,24, 
  /* [23][0][][] */ -4,22,7,-15,-55,24,45,15,-31,-55,42,-38,-64,53,21,-32,19,8,48,-24,8,60,31,-17,4,-33,-46,-40,-70,55,12,86,42,-28,58,-11,-48,47,18,-45,82,32,43,-41,-40,14,-51,43,-37,67,-35,2,-52,68,72,15,30,-7,33,-4,-14,42,41,-62,62,-57,-5,2,56,54,-54,57,71,38,2,-51,-72,-73,-106,-50,-76,27,-69,-68,-11,-86,80,-60,-44,-127,-46,-34,17,-38,-65,83, 
  /* [24][0][][] */ -34,41,57,53,18,-49,-114,62,-29,-103,-96,37,-15,-24,-34,-74,-51,1,-73,98,68,-42,6,-6,-42,25,-33,-78,43,65,47,-52,57,-67,-42,-46,41,-56,-36,-103,-25,56,-82,0,-72,33,15,-24,-48,-66,-3,-45,-79,29,66,-68,22,-69,14,-53,112,-3,15,-44,-124,-38,-74,59,24,-85,-36,-5,-35,-105,-35,-55,-16,-67,2,112,20,-68,17,-62,-91,-28,-48,-22,-89,127,-66,-55,-80,-82,30,73, 
  /* [25][0][][] */ -40,-25,-52,48,-28,-13,-69,57,-37,23,25,34,-97,20,36,-92,-33,-32,-49,17,28,36,14,47,16,-87,-69,-60,45,29,-98,20,-100,-75,64,48,-101,47,-55,100,-101,67,35,-19,-37,-85,-119,-56,-56,21,-96,-71,-3,-27,-92,-79,-9,-16,67,-5,-56,44,-83,15,-84,-85,-43,44,-14,-7,-10,44,-28,63,-42,4,-6,12,13,-101,-73,-39,-22,16,39,66,-25,58,-60,127,-73,-42,-29,36,62,38, 
  /* [26][0][][] */ 93,-40,5,-10,92,-61,105,-8,-44,-18,-51,36,-8,-54,56,7,105,31,-33,-50,-26,-55,81,98,-106,-24,64,59,13,17,-14,-9,-21,65,41,94,26,36,-80,116,87,22,-47,-52,32,69,127,27,32,69,77,-12,109,99,76,55,74,26,-18,16,41,123,-81,-77,68,0,-71,-2,12,-40,-8,49,-71,-48,-47,-90,7,1,0,27,101,32,-62,-53,22,-25,4,-47,-62,-91,21,118,-24,67,11,-62, 
  /* [27][0][][] */ 18,38,-55,77,-23,-5,-7,74,-17,51,-1,-37,-46,69,66,60,24,-60,-19,-13,43,52,34,-58,0,50,-11,48,75,14,15,-58,60,-31,30,81,127,79,23,-53,36,16,15,26,16,-9,77,19,-14,-62,60,72,40,49,-99,-66,87,-32,-20,11,91,-47,-16,-63,16,75,61,-46,42,38,82,-32,1,-13,26,31,-42,22,102,93,-10,-41,100,44,-73,22,26,55,127,58,120,52,58,43,58,-49, 
  /* [28][0][][] */ -126,71,-67,44,-18,51,-118,-34,32,-85,-113,39,27,-87,-10,-115,-88,36,5,51,62,37,-19,-101,104,-83,38,69,-72,-11,-47,5,-47,-13,-58,-75,4,63,-62,72,-108,-50,-30,27,64,64,-41,-25,68,-23,-125,-23,22,-65,-7,26,54,9,11,44,9,-52,-23,-127,-95,-33,49,-67,-102,24,35,67,-122,24,72,2,24,-62,-37,43,-88,29,28,-22,18,-14,-92,-83,-59,88,53,-102,15,22,-36,122, 
  /* [29][0][][] */ 0,1,4,-4,-28,-6,-4,-45,-32,-38,-21,-56,33,-31,-32,2,52,56,-19,70,25,-55,-50,-61,7,-47,-42,-33,-39,63,-48,10,-75,57,43,1,-1,-83,27,-24,53,-54,-7,26,-54,49,-71,14,-13,19,24,38,-62,-12,45,31,36,-18,-50,9,80,42,-28,-2,41,-53,-49,23,39,8,-3,-25,-25,-127,0,-50,-35,30,15,21,-10,-41,-23,-39,8,-50,-57,67,-46,-46,-45,-46,-51,10,-45,-96, 
  /* [30][0][][] */ -76,-84,-103,-64,14,42,6,25,-127,3,5,51,65,15,-62,-64,72,96,78,20,-87,-56,97,-60,-45,15,-2,-33,53,-20,-14,15,-38,-46,20,-21,-41,-46,80,-10,-47,-106,-50,-55,53,104,-16,-7,-26,62,-122,-78,-88,-23,79,-81,33,39,22,-26,-16,-101,36,47,75,31,41,29,46,83,73,-68,21,-120,-46,-32,24,3,11,-32,13,5,66,14,60,-28,34,51,20,-85,4,-110,-24,30,-95,-64, 
  /* [31][0][][] */ -4,119,-3,-68,-52,-36,70,-41,-117,-76,49,-37,-63,-127,96,49,20,74,-19,58,-79,-103,120,36,8,39,-2,-57,-6,93,37,39,22,2,69,41,76,17,15,-38,-47,88,-84,56,39,112,39,22,-50,-61,-93,12,65,-42,-14,16,-36,59,68,85,28,-94,18,-77,42,-111,93,-73,-115,52,40,-6,84,-124,-3,-25,19,126,75,-65,-10,-60,-108,-83,-19,90,97,-56,-121,-1,-84,-21,-90,-61,-119,-15, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0022620570380240679, 0.005907849408686161, 0.0020867201965302229, 0.0028763767331838608, 0.0023369276896119118, 0.0022279389668256044, 0.0022391139063984156, 0.0050065047107636929, 0.0040607517585158348, 0.0027189832180738449, 0.0024338732473552227, 0.0028691482730209827, 0.0034296482335776091, 0.0049122683703899384, 0.0031709491740912199, 0.0035210601054131985, 0.0031061067711561918, 0.0028290543705224991, 0.0024549535010010004, 0.0022995609324425459, 0.0022821361199021339, 0.003031495027244091, 0.0030066065955907106, 0.0029611529316753149, 0.0023220507428050041, 0.0025214315392076969, 0.0021616807207465172, 0.0034874912817031145, 0.0021530650556087494, 0.0032906963024288416, 0.0024055871181190014, 0.0020924443379044533, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -1415, 1168, 620, -427, -1203, -1532, -1371, 1672, -47, 388, -1394, 1231, 135, -621, 231, -779, 147, -619, -1436, 244, -1367, 311, -546, 222, -1248, -1521, 287, 843, -1114, -238, -926, -1184, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 5.3224874136503786e-05, 0.00013900821795687079, 4.9099300667876378e-05, 6.7679451603908092e-05, 5.4986536270007491e-05, 5.2422095905058086e-05, 5.2685034461319447e-05, 0.00011780011118389666, 9.5547104137949646e-05, 6.3976076489780098e-05, 5.7267607189714909e-05, 6.750936881871894e-05, 8.0697609519120306e-05, 0.0001155827849288471, 7.4610572482924908e-05, 8.2848477177321911e-05, 7.3084869654849172e-05, 6.656598998233676e-05, 5.77636128582526e-05, 5.410731682786718e-05, 5.3697320254286751e-05, 7.1329297497868538e-05, 7.0743684773333371e-05, 6.9674184487666935e-05, 5.4636489949189126e-05, 5.932780186412856e-05, 5.0863076467067003e-05, 8.2058621046599001e-05, 5.0660353736020625e-05, 7.7428150689229369e-05, 5.6602049880893901e-05, 4.9233985919272527e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[4*1*1*32] = { 
  /* [0][0][][] */ -18,40,26,32,2,-61,29,127,-61,7,35,47,-6,-23,-90,-13,-25,9,-25,16,-17,-28,-10,-52,69,19,-57,14,-57,-6,15,-65, 
  /* [1][0][][] */ 49,-88,11,28,40,-51,-29,-20,-88,76,-32,-10,83,-127,27,75,22,-33,-37,-30,-6,48,44,74,-64,41,87,-79,0,-37,-16,-22, 
  /* [2][0][][] */ 6,-79,3,16,-90,-38,-10,-60,-8,7,-21,-57,27,-87,-105,-2,83,52,-87,86,-41,-1,-54,-61,54,-127,96,-61,-85,85,76,104, 
  /* [3][0][][] */ 93,-127,100,-51,-82,70,23,-25,78,74,17,67,-78,-95,88,-115,13,8,72,-13,4,68,-83,32,-40,-81,35,58,-50,111,1,-89, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant42_scale = { 4, { 0.0056056221947073936, 0.0045351418666541576, 0.0036530322395265102, 0.0035273891407996416, } };
const TfArray<4, int> quant42_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int32_t tensor_data43[4] = { 20358, -30396, -32774, -39014, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const TfArray<4, float> quant43_scale = { 4, { 0.00030301942024379969, 0.00024515317636542022, 0.00019746954785659909, 0.00019067774701397866, } };
const TfArray<4, int> quant43_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.17669229209423065, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,81,81,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.10163825750350952, } };
const TfArray<1, int> quant50_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.086881242692470551, } };
const TfArray<1, int> quant53_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.136675626039505, } };
const TfArray<1, int> quant54_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,41,41,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.070978112518787384, } };
const TfArray<1, int> quant58_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.089030593633651733, } };
const TfArray<1, int> quant61_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.10941608250141144, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.074211865663528442, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.13993233442306519, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,20,20,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.054056338965892792, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,20,20,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14520969986915588, } };
const TfArray<1, int> quant69_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,20,20,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension46, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension47, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension51, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension53, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension55, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension57, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 99888, (TfLiteIntArray*)&tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension61, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension62, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension63, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 44800, (TfLiteIntArray*)&tensor_dimension65, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension66, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension69, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for(size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
